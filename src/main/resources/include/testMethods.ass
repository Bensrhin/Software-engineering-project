	TSTO #266
	BOV pile_pleine
	ADDSP #63
; table des methodes
; construction de la table des methodes de Object
	LOAD #null, R0
	STORE R0, 1(GB)
	LOAD code.Object.equals, R0
	STORE R0, 2(GB)
; construction de la table des methodes de Methods
	LEA 1(GB), R0
	STORE R0, 3(GB)
	LOAD code.Methods.factoriel, R0
	STORE R0, 5(GB)
	LOAD code.Methods.abs, R0
	STORE R0, 7(GB)
	LOAD code.Methods.ulp, R0
	STORE R0, 8(GB)
	LOAD code.Methods.power, R0
	STORE R0, 6(GB)
	LOAD code.Object.equals, R0
	STORE R0, 4(GB)
; construction de la table des methodes de ChebychevValues
	LEA 1(GB), R0
	STORE R0, 9(GB)
	LOAD code.ChebychevValues.ChebyValuesActan, R0
	STORE R0, 13(GB)
	LOAD code.ChebychevValues.ChebyValuesSin, R0
	STORE R0, 12(GB)
	LOAD code.ChebychevValues.ChebyValuesCos, R0
	STORE R0, 11(GB)
	LOAD code.ChebychevValues.otherActanVal, R0
	STORE R0, 14(GB)
	LOAD code.Object.equals, R0
	STORE R0, 10(GB)
; construction de la table des methodes de Couple
	LEA 1(GB), R0
	STORE R0, 15(GB)
	LOAD code.Object.equals, R0
	STORE R0, 16(GB)
; construction de la table des methodes de RangeReduction
	LEA 1(GB), R0
	STORE R0, 17(GB)
	LOAD code.RangeReduction.FirstReductionCos, R0
	STORE R0, 20(GB)
	LOAD code.RangeReduction.FirstReductionSin, R0
	STORE R0, 19(GB)
	LOAD code.Object.equals, R0
	STORE R0, 18(GB)
; construction de la table des methodes de BreakPoints
	LEA 1(GB), R0
	STORE R0, 21(GB)
	LOAD code.BreakPoints.BPOptVal, R0
	STORE R0, 24(GB)
	LOAD code.BreakPoints.breakPoint, R0
	STORE R0, 23(GB)
	LOAD code.Object.equals, R0
	STORE R0, 22(GB)
; construction de la table des methodes de Taylor
	LEA 1(GB), R0
	STORE R0, 25(GB)
	LOAD code.Taylor.taylorCosinus, R0
	STORE R0, 30(GB)
	LOAD code.Taylor.coefTaylorSinus, R0
	STORE R0, 27(GB)
	LOAD code.Taylor.taylorArctan, R0
	STORE R0, 32(GB)
	LOAD code.Taylor.coefTaylorArcsin, R0
	STORE R0, 33(GB)
	LOAD code.Taylor.taylorSinus, R0
	STORE R0, 28(GB)
	LOAD code.Taylor.taylorArcsin, R0
	STORE R0, 34(GB)
	LOAD code.Taylor.coefTaylorCosinus, R0
	STORE R0, 29(GB)
	LOAD code.Taylor.coefTaylorArctan, R0
	STORE R0, 31(GB)
	LOAD code.Object.equals, R0
	STORE R0, 26(GB)
; construction de la table des methodes de ChebyApproxi32
	LEA 1(GB), R0
	STORE R0, 35(GB)
	LOAD code.ChebyApproxi32.ChebychevActan, R0
	STORE R0, 37(GB)
	LOAD code.ChebyApproxi32.ChebychevSinus, R0
	STORE R0, 38(GB)
	LOAD code.ChebyApproxi32.ChebychevCosinus, R0
	STORE R0, 39(GB)
	LOAD code.Object.equals, R0
	STORE R0, 36(GB)
; construction de la table des methodes de Chebychev
	LEA 1(GB), R0
	STORE R0, 40(GB)
	LOAD code.Chebychev.arcsinCheb, R0
	STORE R0, 46(GB)
	LOAD code.Chebychev.getIndexActan, R0
	STORE R0, 44(GB)
	LOAD code.Chebychev.arctanCheb, R0
	STORE R0, 45(GB)
	LOAD code.Chebychev.sinCheb, R0
	STORE R0, 42(GB)
	LOAD code.Chebychev.cosCheb, R0
	STORE R0, 43(GB)
	LOAD code.Object.equals, R0
	STORE R0, 41(GB)
; Main program
; Beginning of main instructions:
	LOAD #0x1.921fb8p1, R2
	STORE R2, 47(GB)
	LOAD #1, R2
	OPP R2, R2
	LOAD #32, R3
	QUO R3, R2
	BOV divisionErr
	FLOAT R2, R2
	STORE R2, 48(GB)
	LOAD 47(GB), R2
	LOAD #4, R3
	FLOAT R3, R3
	DIV R3, R2
	BOV divisionErr
	STORE R2, 49(GB)
; instruction new
	NEW #2, R2
	LEA 25(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.Taylor
	POP R2
	STORE R2, 50(GB)
; instruction new
	NEW #2, R2
	LEA 17(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.RangeReduction
	POP R2
	STORE R2, 51(GB)
; instruction new
	NEW #2, R2
	LEA 35(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.ChebyApproxi32
	POP R2
	STORE R2, 52(GB)
; instruction new
	NEW #8, R2
	LEA 40(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.Chebychev
	POP R2
	STORE R2, 53(GB)
; appel de methode2
	ADDSP #2
	LOAD 52(GB), R2
	STORE R2, 0(SP)
	LOAD 48(GB), R3
	STORE R3, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 2(R2)
	SUBSP #2
	LOAD R0, R3
	STORE R3, 54(GB)
; appel de methode3
	ADDSP #2
	LOAD 52(GB), R3
	STORE R3, 0(SP)
	LOAD 48(GB), R2
	STORE R2, -1(SP)
	LOAD 0(SP), R3
	CMP #null, R3
	BEQ pile_pleine
	LOAD 0(R3), R3
	BSR 3(R3)
	SUBSP #2
	LOAD R0, R2
	STORE R2, 55(GB)
; appel de methode4
	ADDSP #2
	LOAD 52(GB), R2
	STORE R2, 0(SP)
	LOAD 48(GB), R3
	STORE R3, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 4(R2)
	SUBSP #2
	LOAD R0, R3
	STORE R3, 56(GB)
; appel de methode2
	ADDSP #2
	LOAD 53(GB), R3
	STORE R3, 0(SP)
	LOAD 49(GB), R2
	STORE R2, -1(SP)
	LOAD 0(SP), R3
	CMP #null, R3
	BEQ pile_pleine
	LOAD 0(R3), R3
	BSR 2(R3)
	SUBSP #2
	LOAD R0, R2
	STORE R2, 57(GB)
; appel de methode3
	ADDSP #2
	LOAD 51(GB), R2
	STORE R2, 0(SP)
	LOAD #100, R3
	FLOAT R3, R3
	LOAD 47(GB), R4
	MUL R4, R3
	BOV over_flow
	STORE R3, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #2
	LOAD R0, R3
	STORE R3, 58(GB)
; appel de methode2
	ADDSP #2
	LOAD 51(GB), R3
	STORE R3, 0(SP)
	LOAD #100, R2
	FLOAT R2, R2
	LOAD 47(GB), R4
	MUL R4, R2
	BOV over_flow
	STORE R2, -1(SP)
	LOAD 0(SP), R3
	CMP #null, R3
	BEQ pile_pleine
	LOAD 0(R3), R3
	BSR 2(R3)
	SUBSP #2
	LOAD R0, R2
	STORE R2, 59(GB)
; appel de methode5
	ADDSP #3
	LOAD 50(GB), R2
	STORE R2, 0(SP)
	LOAD 47(GB), R3
	LOAD #5, R4
	FLOAT R4, R4
	DIV R4, R3
	BOV divisionErr
	STORE R3, -1(SP)
	LOAD #7, R3
	STORE R3, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 5(R2)
	SUBSP #3
	LOAD R0, R3
	STORE R3, 60(GB)
; appel de methode3
	ADDSP #3
	LOAD 50(GB), R3
	STORE R3, 0(SP)
	LOAD 47(GB), R2
	LOAD #2, R4
	FLOAT R4, R4
	DIV R4, R2
	BOV divisionErr
	STORE R2, -1(SP)
	LOAD #6, R2
	STORE R2, -2(SP)
	LOAD 0(SP), R3
	CMP #null, R3
	BEQ pile_pleine
	LOAD 0(R3), R3
	BSR 3(R3)
	SUBSP #3
	LOAD R0, R2
	STORE R2, 61(GB)
; appel de methode7
	ADDSP #3
	LOAD 50(GB), R2
	STORE R2, 0(SP)
	LOAD 47(GB), R3
	LOAD #4, R4
	FLOAT R4, R4
	DIV R4, R3
	BOV divisionErr
	STORE R3, -1(SP)
	LOAD #7, R3
	STORE R3, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 7(R2)
	SUBSP #3
	LOAD R0, R3
	STORE R3, 62(GB)
; appel de methode9
	ADDSP #3
	LOAD 50(GB), R3
	STORE R3, 0(SP)
	LOAD 47(GB), R2
	LOAD #4, R4
	FLOAT R4, R4
	DIV R4, R2
	BOV divisionErr
	STORE R2, -1(SP)
	LOAD #7, R2
	STORE R2, -2(SP)
	LOAD 0(SP), R3
	CMP #null, R3
	BEQ pile_pleine
	LOAD 0(R3), R3
	BSR 9(R3)
	SUBSP #3
	LOAD R0, R2
	STORE R2, 63(GB)
	LOAD 60(GB), R1
	WFLOAT
	WNL
	LOAD 61(GB), R1
	WFLOAT
	WNL
	LOAD 62(GB), R1
	WFLOAT
	WNL
	LOAD 63(GB), R1
	WFLOAT
	WNL
	LOAD 58(GB), R1
	WFLOAT
	WNL
	LOAD 59(GB), R1
	WFLOAT
	WNL
	LOAD 57(GB), R1
	WFLOAT
	LOAD 54(GB), R1
	WFLOAT
	WNL
	LOAD 55(GB), R1
	WFLOAT
	WNL
	LOAD 56(GB), R1
	WFLOAT
	WNL
	HALT
init.Methods:
	RTS
code.Methods.factoriel:
	PUSH R6
	PUSH R5
	PUSH R4
	PUSH R3
	PUSH R2
	LOAD -3(LB), R3
	LOAD #0, R4
	SUB R4, R3
	LOAD R3, R1
	BEQ OpCmp_if_in_a412
	LOAD #1, R1
	BRA OpCmp_fin_in_a412
OpCmp_if_in_a412:
	LOAD #0, R1
OpCmp_fin_in_a412:
	LOAD R1, R2
	LOAD R2, R1
	BNE IfThenElse_else_a412
	LOAD #1, R4
	LOAD R4, R0
	BRA IfThenElse_fin_a412
IfThenElse_else_a412:
	LOAD -3(LB), R4
; appel de methode2
	ADDSP #2
	LOAD -2(LB), R3
	STORE R3, 0(SP)
	LOAD -3(LB), R5
	LOAD #1, R6
	SUB R6, R5
	STORE R5, -1(SP)
	LOAD 0(SP), R3
	CMP #null, R3
	BEQ pile_pleine
	LOAD 0(R3), R3
	BSR 2(R3)
	SUBSP #2
	LOAD R0, R5
	MUL R5, R4
	BOV over_flow
	LOAD R4, R0
IfThenElse_fin_a412:
	POP R2
	POP R3
	POP R4
	POP R5
	POP R6
	RTS
code.Methods.power:
	PUSH R7
	PUSH R6
	PUSH R5
	PUSH R4
	PUSH R3
	PUSH R2
	LOAD -4(LB), R4
	LOAD #0, R5
	SUB R5, R4
	LOAD R4, R1
	BGE OpCmp_if_in_a1311
	LOAD #1, R1
	BRA OpCmp_fin_in_a1311
OpCmp_if_in_a1311:
	LOAD #0, R1
OpCmp_fin_in_a1311:
	LOAD R1, R2
	LOAD R2, R1
	BNE IfThenElse_else_a1311
	LOAD -4(LB), R4
	LOAD #0, R3
	SUB R3, R4
	LOAD R4, R1
	BEQ OpCmp_if_in_a1415
	LOAD #1, R1
	BRA OpCmp_fin_in_a1415
OpCmp_if_in_a1415:
	LOAD #0, R1
OpCmp_fin_in_a1415:
	LOAD R1, R5
	LOAD R5, R1
	BNE IfThenElse_else_a1415
	LOAD #1, R3
	FLOAT R3, R3
	LOAD R3, R0
	BRA IfThenElse_fin_a1415
IfThenElse_else_a1415:
	LOAD -3(LB), R3
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R4
	STORE R4, 0(SP)
	LOAD -3(LB), R6
	STORE R6, -1(SP)
	LOAD -4(LB), R6
	LOAD #1, R7
	SUB R7, R6
	STORE R6, -2(SP)
	LOAD 0(SP), R4
	CMP #null, R4
	BEQ pile_pleine
	LOAD 0(R4), R4
	BSR 3(R4)
	SUBSP #3
	LOAD R0, R6
	MUL R6, R3
	BOV over_flow
	LOAD R3, R0
IfThenElse_fin_a1415:
	BRA IfThenElse_fin_a1311
IfThenElse_else_a1311:
	LOAD -4(LB), R3
	LOAD #0, R6
	SUB R6, R3
	LOAD R3, R1
	BEQ OpCmp_if_in_a2216
	LOAD #1, R1
	BRA OpCmp_fin_in_a2216
OpCmp_if_in_a2216:
	LOAD #0, R1
OpCmp_fin_in_a2216:
	LOAD R1, R5
	LOAD R5, R1
	BNE IfThenElse_else_a2216
	LOAD #1, R6
	FLOAT R6, R6
	LOAD R6, R0
	BRA IfThenElse_fin_a2216
IfThenElse_else_a2216:
	LOAD #1, R6
	FLOAT R6, R6
	LOAD -3(LB), R3
	DIV R3, R6
	BOV divisionErr
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R3
	STORE R3, 0(SP)
	LOAD -3(LB), R4
	STORE R4, -1(SP)
	LOAD -4(LB), R4
	LOAD #1, R7
	ADD R7, R4
	STORE R4, -2(SP)
	LOAD 0(SP), R3
	CMP #null, R3
	BEQ pile_pleine
	LOAD 0(R3), R3
	BSR 3(R3)
	SUBSP #3
	LOAD R0, R4
	MUL R4, R6
	BOV over_flow
	LOAD R6, R0
IfThenElse_fin_a2216:
IfThenElse_fin_a1311:
	POP R2
	POP R3
	POP R4
	POP R5
	POP R6
	POP R7
	RTS
code.Methods.abs:
	PUSH R6
	PUSH R5
	PUSH R2
	LOAD -3(LB), R5
	LOAD #0x0.0p0, R6
	SUB R6, R5
	LOAD R5, R1
	BGT OpCmp_if_in_a3212
	LOAD #1, R1
	BRA OpCmp_fin_in_a3212
OpCmp_if_in_a3212:
	LOAD #0, R1
OpCmp_fin_in_a3212:
	LOAD R1, R2
	LOAD R2, R1
	BNE IfThenElse_else_a3212
	LOAD -3(LB), R6
	LOAD R6, R0
	BRA IfThenElse_fin_a3212
IfThenElse_else_a3212:
	LOAD -3(LB), R6
	OPP R6, R6
	LOAD R6, R0
IfThenElse_fin_a3212:
	POP R2
	POP R5
	POP R6
	RTS
code.Methods.ulp:
	PUSH R7
	PUSH R6
	PUSH R5
	PUSH R4
	PUSH R3
	PUSH R2
	LOAD #126, R2
	OPP R2, R2
	STORE R2, 1(LB)
	LOAD #127, R2
	STORE R2, 2(LB)
	LOAD #0, R2
	STORE R2, 3(LB)
	LOAD #0x0.0p0, R2
	STORE R2, 4(LB)
; appel de methode4
	ADDSP #2
	LOAD -2(LB), R6
	STORE R6, 0(SP)
	LOAD -3(LB), R5
	STORE R5, -1(SP)
	LOAD 0(SP), R6
	CMP #null, R6
	BEQ pile_pleine
	LOAD 0(R6), R6
	BSR 4(R6)
	SUBSP #2
	LOAD R0, R5
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R6
	STORE R6, 0(SP)
	LOAD #0x1.0p1, R4
	STORE R4, -1(SP)
	LOAD 2(LB), R4
	OPP R4, R4
	STORE R4, -2(SP)
	LOAD 0(SP), R6
	CMP #null, R6
	BEQ pile_pleine
	LOAD 0(R6), R6
	BSR 3(R6)
	SUBSP #3
	LOAD R0, R4
	SUB R4, R5
	LOAD R5, R1
	BLE OpCmp_if_in_a4512
	LOAD #1, R1
	BRA OpCmp_fin_in_a4512
OpCmp_if_in_a4512:
	LOAD #0, R1
OpCmp_fin_in_a4512:
	LOAD R1, R2
	LOAD R2, R1
	BNE IfThenElse_else_a4512
	LOAD #0x0.000002p-126, R4
	LOAD R4, R0
	BRA IfThenElse_fin_a4512
IfThenElse_else_a4512:
; appel de methode4
	ADDSP #2
	LOAD -2(LB), R5
	STORE R5, 0(SP)
	LOAD -3(LB), R6
	STORE R6, -1(SP)
	LOAD 0(SP), R5
	CMP #null, R5
	BEQ pile_pleine
	LOAD 0(R5), R5
	BSR 4(R5)
	SUBSP #2
	LOAD R0, R6
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R5
	STORE R5, 0(SP)
	LOAD #0x1.0p1, R3
	STORE R3, -1(SP)
	LOAD 2(LB), R3
	STORE R3, -2(SP)
	LOAD 0(SP), R5
	CMP #null, R5
	BEQ pile_pleine
	LOAD 0(R5), R5
	BSR 3(R5)
	SUBSP #3
	LOAD R0, R3
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R5
	STORE R5, 0(SP)
	LOAD #0x1.0p1, R7
	STORE R7, -1(SP)
	LOAD #104, R7
	STORE R7, -2(SP)
	LOAD 0(SP), R5
	CMP #null, R5
	BEQ pile_pleine
	LOAD 0(R5), R5
	BSR 3(R5)
	SUBSP #3
	LOAD R0, R7
	SUB R7, R3
	SUB R3, R6
	LOAD R6, R1
	BGT OpCmp_if_in_a4917
	LOAD #1, R1
	BRA OpCmp_fin_in_a4917
OpCmp_if_in_a4917:
	LOAD #0, R1
OpCmp_fin_in_a4917:
	LOAD R1, R4
	LOAD R4, R1
	BNE IfThenElse_else_a4917
; appel de methode4
	ADDSP #2
	LOAD -2(LB), R3
	STORE R3, 0(SP)
	LOAD -3(LB), R6
	STORE R6, -1(SP)
	LOAD 0(SP), R3
	CMP #null, R3
	BEQ pile_pleine
	LOAD 0(R3), R3
	BSR 4(R3)
	SUBSP #2
	LOAD R0, R6
	LOAD R6, R0
	BRA IfThenElse_fin_a4917
IfThenElse_else_a4917:
While_cond_a5418:
	LOAD 2(LB), R3
	LOAD 1(LB), R7
	SUB R7, R3
	LOAD #1, R7
	SUB R7, R3
	LOAD R3, R1
	BGT OpCmp_if_in_a5418
	LOAD #1, R1
	BRA OpCmp_fin_in_a5418
OpCmp_if_in_a5418:
	LOAD #0, R1
OpCmp_fin_in_a5418:
	LOAD R1, R6
	LOAD R6, R1
	BNE While_fin_a5418
	LOAD 2(LB), R7
	LOAD 1(LB), R3
	ADD R3, R7
	LOAD #2, R3
	QUO R3, R7
	BOV divisionErr
	STORE R7, 3(LB)
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R7
	STORE R7, 0(SP)
	LOAD #0x1.0p1, R3
	STORE R3, -1(SP)
	LOAD 3(LB), R3
	STORE R3, -2(SP)
	LOAD 0(SP), R7
	CMP #null, R7
	BEQ pile_pleine
	LOAD 0(R7), R7
	BSR 3(R7)
	SUBSP #3
	LOAD R0, R3
	STORE R3, 4(LB)
; appel de methode4
	ADDSP #2
	LOAD -2(LB), R7
	STORE R7, 0(SP)
	LOAD -3(LB), R5
	STORE R5, -1(SP)
	LOAD 0(SP), R7
	CMP #null, R7
	BEQ pile_pleine
	LOAD 0(R7), R7
	BSR 4(R7)
	SUBSP #2
	LOAD R0, R5
	LOAD 4(LB), R7
	SUB R7, R5
	LOAD R5, R1
	BGT OpCmp_if_in_a5720
	LOAD #1, R1
	BRA OpCmp_fin_in_a5720
OpCmp_if_in_a5720:
	LOAD #0, R1
OpCmp_fin_in_a5720:
	LOAD R1, R3
	LOAD R3, R1
	BNE IfThenElse_else_a5720
	LOAD 3(LB), R7
	STORE R7, 1(LB)
	BRA IfThenElse_fin_a5720
IfThenElse_else_a5720:
	LOAD 3(LB), R7
	STORE R7, 2(LB)
IfThenElse_fin_a5720:
	BRA While_cond_a5418
While_fin_a5418:
; appel de methode4
	ADDSP #2
	LOAD -2(LB), R3
	STORE R3, 0(SP)
	LOAD -3(LB), R7
	STORE R7, -1(SP)
	LOAD 0(SP), R3
	CMP #null, R3
	BEQ pile_pleine
	LOAD 0(R3), R3
	BSR 4(R3)
	SUBSP #2
	LOAD R0, R7
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R3
	STORE R3, 0(SP)
	LOAD #0x1.0p1, R5
	STORE R5, -1(SP)
	LOAD 2(LB), R5
	STORE R5, -2(SP)
	LOAD 0(SP), R3
	CMP #null, R3
	BEQ pile_pleine
	LOAD 0(R3), R3
	BSR 3(R3)
	SUBSP #3
	LOAD R0, R5
	SUB R5, R7
	LOAD R7, R1
	BEQ OpCmp_if_in_a6516
	LOAD #1, R1
	BRA OpCmp_fin_in_a6516
OpCmp_if_in_a6516:
	LOAD #0, R1
OpCmp_fin_in_a6516:
	LOAD R1, R6
	LOAD R6, R1
	BNE IfThenElse_else_a6516
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R5
	STORE R5, 0(SP)
	LOAD #0x1.0p1, R7
	STORE R7, -1(SP)
	LOAD 2(LB), R7
	LOAD #23, R3
	SUB R3, R7
	STORE R7, -2(SP)
	LOAD 0(SP), R5
	CMP #null, R5
	BEQ pile_pleine
	LOAD 0(R5), R5
	BSR 3(R5)
	SUBSP #3
	LOAD R0, R7
	LOAD R7, R0
	BRA IfThenElse_fin_a6516
IfThenElse_else_a6516:
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R7
	STORE R7, 0(SP)
	LOAD #0x1.0p1, R5
	STORE R5, -1(SP)
	LOAD 2(LB), R5
	LOAD #24, R3
	SUB R3, R5
	STORE R5, -2(SP)
	LOAD 0(SP), R7
	CMP #null, R7
	BEQ pile_pleine
	LOAD 0(R7), R7
	BSR 3(R7)
	SUBSP #3
	LOAD R0, R5
	LOAD R5, R0
IfThenElse_fin_a6516:
IfThenElse_fin_a4917:
IfThenElse_fin_a4512:
	POP R2
	POP R3
	POP R4
	POP R5
	POP R6
	POP R7
	RTS
init.ChebychevValues:
	RTS
code.ChebychevValues.ChebyValuesCos:
	PUSH R7
	PUSH R6
	PUSH R5
	PUSH R4
	PUSH R2
	LOAD -3(LB), R4
	LOAD #1, R6
	SUB R6, R4
	LOAD R4, R1
	BEQ OpCmp_if_in_a312
	LOAD #1, R1
	BRA OpCmp_fin_in_a312
OpCmp_if_in_a312:
	LOAD #0, R1
OpCmp_fin_in_a312:
	LOAD R1, R2
	LOAD R2, R1
	BNE IfThenElse_else_a312
	LOAD #0x1.c1528p-1, R6
	LOAD R6, R0
	BRA IfThenElse_fin_a312
IfThenElse_else_a312:
	LOAD -3(LB), R4
	LOAD #2, R5
	SUB R5, R4
	LOAD R4, R1
	BEQ OpCmp_if_in_a617
	LOAD #1, R1
	BRA OpCmp_fin_in_a617
OpCmp_if_in_a617:
	LOAD #0, R1
OpCmp_fin_in_a617:
	LOAD R1, R6
	LOAD R6, R1
	BNE IfThenElse_else_a617
	LOAD #0x1.f0154ap-1, R5
	LOAD R5, R0
	BRA IfThenElse_fin_a617
IfThenElse_else_a617:
	LOAD -3(LB), R4
	LOAD #3, R7
	SUB R7, R4
	LOAD R4, R1
	BEQ OpCmp_if_in_a917
	LOAD #1, R1
	BRA OpCmp_fin_in_a917
OpCmp_if_in_a917:
	LOAD #0, R1
OpCmp_fin_in_a917:
	LOAD R1, R5
	LOAD R5, R1
	BNE IfThenElse_else_a917
	LOAD #0x1.fc0156p-1, R7
	LOAD R7, R0
	BRA IfThenElse_fin_a917
IfThenElse_else_a917:
	LOAD #0x1.ff0016p-1, R7
	LOAD R7, R0
IfThenElse_fin_a917:
IfThenElse_fin_a617:
IfThenElse_fin_a312:
	POP R2
	POP R4
	POP R5
	POP R6
	POP R7
	RTS
code.ChebychevValues.ChebyValuesSin:
	PUSH R7
	PUSH R6
	PUSH R5
	PUSH R4
	PUSH R2
	LOAD -3(LB), R6
	LOAD #1, R5
	SUB R5, R6
	LOAD R6, R1
	BEQ OpCmp_if_in_a1812
	LOAD #1, R1
	BRA OpCmp_fin_in_a1812
OpCmp_if_in_a1812:
	LOAD #0, R1
OpCmp_fin_in_a1812:
	LOAD R1, R2
	LOAD R2, R1
	BNE IfThenElse_else_a1812
	LOAD #0x1.eaee88p-2, R5
	LOAD R5, R0
	BRA IfThenElse_fin_a1812
IfThenElse_else_a1812:
	LOAD -3(LB), R6
	LOAD #2, R7
	SUB R7, R6
	LOAD R6, R1
	BEQ OpCmp_if_in_a2117
	LOAD #1, R1
	BRA OpCmp_fin_in_a2117
OpCmp_if_in_a2117:
	LOAD #0, R1
OpCmp_fin_in_a2117:
	LOAD R1, R5
	LOAD R5, R1
	BNE IfThenElse_else_a2117
	LOAD #0x1.faaeeep-3, R7
	LOAD R7, R0
	BRA IfThenElse_fin_a2117
IfThenElse_else_a2117:
	LOAD -3(LB), R6
	LOAD #3, R4
	SUB R4, R6
	LOAD R6, R1
	BEQ OpCmp_if_in_a2417
	LOAD #1, R1
	BRA OpCmp_fin_in_a2417
OpCmp_if_in_a2417:
	LOAD #0, R1
OpCmp_fin_in_a2417:
	LOAD R1, R7
	LOAD R7, R1
	BNE IfThenElse_else_a2417
	LOAD #0x1.feaaeep-4, R4
	LOAD R4, R0
	BRA IfThenElse_fin_a2417
IfThenElse_else_a2417:
	LOAD #0x1.ffaaaep-5, R4
	LOAD R4, R0
IfThenElse_fin_a2417:
IfThenElse_fin_a2117:
IfThenElse_fin_a1812:
	POP R2
	POP R4
	POP R5
	POP R6
	POP R7
	RTS
code.ChebychevValues.ChebyValuesActan:
	PUSH R12
	PUSH R11
	PUSH R10
	PUSH R9
	PUSH R8
	PUSH R7
	PUSH R6
	PUSH R5
	PUSH R4
	PUSH R3
	PUSH R2
	LOAD -3(LB), R5
	LOAD #0, R7
	SUB R7, R5
	LOAD R5, R1
	BEQ OpCmp_if_in_a3312
	LOAD #1, R1
	BRA OpCmp_fin_in_a3312
OpCmp_if_in_a3312:
	LOAD #0, R1
OpCmp_fin_in_a3312:
	LOAD R1, R2
	LOAD R2, R1
	BNE IfThenElse_else_a3312
	LOAD #0x1.936bb8p-4, R7
	OPP R7, R7
	LOAD R7, R0
	BRA IfThenElse_fin_a3312
IfThenElse_else_a3312:
	LOAD -3(LB), R5
	LOAD #1, R4
	SUB R4, R5
	LOAD R5, R1
	BEQ OpCmp_if_in_a3617
	LOAD #1, R1
	BRA OpCmp_fin_in_a3617
OpCmp_if_in_a3617:
	LOAD #0, R1
OpCmp_fin_in_a3617:
	LOAD R1, R7
	LOAD R7, R1
	BNE IfThenElse_else_a3617
	LOAD #0x1.7471fp1, R4
	OPP R4, R4
	LOAD R4, R0
	BRA IfThenElse_fin_a3617
IfThenElse_else_a3617:
	LOAD -3(LB), R5
	LOAD #2, R6
	SUB R6, R5
	LOAD R5, R1
	BEQ OpCmp_if_in_a3917
	LOAD #1, R1
	BRA OpCmp_fin_in_a3917
OpCmp_if_in_a3917:
	LOAD #0, R1
OpCmp_fin_in_a3917:
	LOAD R1, R4
	LOAD R4, R1
	BNE IfThenElse_else_a3917
	LOAD #0x1.e6db9ap-1, R6
	LOAD R6, R0
	BRA IfThenElse_fin_a3917
IfThenElse_else_a3917:
	LOAD -3(LB), R5
	LOAD #3, R3
	SUB R3, R5
	LOAD R5, R1
	BEQ OpCmp_if_in_a4217
	LOAD #1, R1
	BRA OpCmp_fin_in_a4217
OpCmp_if_in_a4217:
	LOAD #0, R1
OpCmp_fin_in_a4217:
	LOAD R1, R6
	LOAD R6, R1
	BNE IfThenElse_else_a4217
	LOAD #0x1.9a9d3ap-2, R3
	OPP R3, R3
	LOAD R3, R0
	BRA IfThenElse_fin_a4217
IfThenElse_else_a4217:
	LOAD -3(LB), R5
	LOAD #4, R8
	SUB R8, R5
	LOAD R5, R1
	BEQ OpCmp_if_in_a4517
	LOAD #1, R1
	BRA OpCmp_fin_in_a4517
OpCmp_if_in_a4517:
	LOAD #0, R1
OpCmp_fin_in_a4517:
	LOAD R1, R3
	LOAD R3, R1
	BNE IfThenElse_else_a4517
	LOAD #0x1.4e2a9cp4, R8
	OPP R8, R8
	LOAD R8, R0
	BRA IfThenElse_fin_a4517
IfThenElse_else_a4517:
	LOAD -3(LB), R5
	LOAD #5, R9
	SUB R9, R5
	LOAD R5, R1
	BEQ OpCmp_if_in_a4817
	LOAD #1, R1
	BRA OpCmp_fin_in_a4817
OpCmp_if_in_a4817:
	LOAD #0, R1
OpCmp_fin_in_a4817:
	LOAD R1, R8
	LOAD R8, R1
	BNE IfThenElse_else_a4817
	LOAD #0x1.08a24cp-1, R9
	LOAD R9, R0
	BRA IfThenElse_fin_a4817
IfThenElse_else_a4817:
	LOAD -3(LB), R5
	LOAD #6, R10
	SUB R10, R5
	LOAD R5, R1
	BEQ OpCmp_if_in_a5117
	LOAD #1, R1
	BRA OpCmp_fin_in_a5117
OpCmp_if_in_a5117:
	LOAD #0, R1
OpCmp_fin_in_a5117:
	LOAD R1, R9
	LOAD R9, R1
	BNE IfThenElse_else_a5117
	LOAD #0x1.911bb2p-1, R10
	OPP R10, R10
	LOAD R10, R0
	BRA IfThenElse_fin_a5117
IfThenElse_else_a5117:
	LOAD -3(LB), R5
	LOAD #7, R11
	SUB R11, R5
	LOAD R5, R1
	BEQ OpCmp_if_in_a5417
	LOAD #1, R1
	BRA OpCmp_fin_in_a5417
OpCmp_if_in_a5417:
	LOAD #0, R1
OpCmp_fin_in_a5417:
	LOAD R1, R10
	LOAD R10, R1
	BNE IfThenElse_else_a5417
	LOAD #0x1.0ae7c8p2, R11
	LOAD R11, R0
	BRA IfThenElse_fin_a5417
IfThenElse_else_a5417:
	LOAD -3(LB), R5
	LOAD #8, R12
	SUB R12, R5
	LOAD R5, R1
	BEQ OpCmp_if_in_a5717
	LOAD #1, R1
	BRA OpCmp_fin_in_a5717
OpCmp_if_in_a5717:
	LOAD #0, R1
OpCmp_fin_in_a5717:
	LOAD R1, R11
	LOAD R11, R1
	BNE IfThenElse_else_a5717
	LOAD #0x1.921412p-3, R12
	LOAD R12, R0
	BRA IfThenElse_fin_a5717
IfThenElse_else_a5717:
	LOAD #0x0.0p0, R12
	LOAD R12, R0
IfThenElse_fin_a5717:
IfThenElse_fin_a5417:
IfThenElse_fin_a5117:
IfThenElse_fin_a4817:
IfThenElse_fin_a4517:
IfThenElse_fin_a4217:
IfThenElse_fin_a3917:
IfThenElse_fin_a3617:
IfThenElse_fin_a3312:
	POP R2
	POP R3
	POP R4
	POP R5
	POP R6
	POP R7
	POP R8
	POP R9
	POP R10
	POP R11
	POP R12
	RTS
code.ChebychevValues.otherActanVal:
	PUSH R12
	PUSH R11
	PUSH R10
	PUSH R9
	PUSH R8
	PUSH R7
	PUSH R6
	PUSH R5
	PUSH R4
	PUSH R3
	PUSH R2
	LOAD -3(LB), R7
	LOAD #0, R4
	SUB R4, R7
	LOAD R7, R1
	BEQ OpCmp_if_in_a6612
	LOAD #1, R1
	BRA OpCmp_fin_in_a6612
OpCmp_if_in_a6612:
	LOAD #0, R1
OpCmp_fin_in_a6612:
	LOAD R1, R2
	LOAD R2, R1
	BNE IfThenElse_else_a6612
	LOAD #0x0.0p0, R4
	LOAD R4, R0
	BRA IfThenElse_fin_a6612
IfThenElse_else_a6612:
	LOAD -3(LB), R7
	LOAD #1, R6
	SUB R6, R7
	LOAD R7, R1
	BEQ OpCmp_if_in_a6917
	LOAD #1, R1
	BRA OpCmp_fin_in_a6917
OpCmp_if_in_a6917:
	LOAD #0, R1
OpCmp_fin_in_a6917:
	LOAD R1, R4
	LOAD R4, R1
	BNE IfThenElse_else_a6917
	LOAD #0x1.975f5ep-3, R6
	LOAD R6, R0
	BRA IfThenElse_fin_a6917
IfThenElse_else_a6917:
	LOAD -3(LB), R7
	LOAD #2, R3
	SUB R3, R7
	LOAD R7, R1
	BEQ OpCmp_if_in_a7217
	LOAD #1, R1
	BRA OpCmp_fin_in_a7217
OpCmp_if_in_a7217:
	LOAD #0, R1
OpCmp_fin_in_a7217:
	LOAD R1, R6
	LOAD R6, R1
	BNE IfThenElse_else_a7217
	LOAD #0x1.a8279ap-2, R3
	LOAD R3, R0
	BRA IfThenElse_fin_a7217
IfThenElse_else_a7217:
	LOAD -3(LB), R7
	LOAD #3, R8
	SUB R8, R7
	LOAD R7, R1
	BEQ OpCmp_if_in_a7517
	LOAD #1, R1
	BRA OpCmp_fin_in_a7517
OpCmp_if_in_a7517:
	LOAD #0, R1
OpCmp_fin_in_a7517:
	LOAD R1, R3
	LOAD R3, R1
	BNE IfThenElse_else_a7517
	LOAD #0x1.561b82p-1, R8
	LOAD R8, R0
	BRA IfThenElse_fin_a7517
IfThenElse_else_a7517:
	LOAD -3(LB), R7
	LOAD #4, R9
	SUB R9, R7
	LOAD R7, R1
	BEQ OpCmp_if_in_a7817
	LOAD #1, R1
	BRA OpCmp_fin_in_a7817
OpCmp_if_in_a7817:
	LOAD #0, R1
OpCmp_fin_in_a7817:
	LOAD R1, R8
	LOAD R8, R1
	BNE IfThenElse_else_a7817
	LOAD #0x1.0p0, R9
	LOAD R9, R0
	BRA IfThenElse_fin_a7817
IfThenElse_else_a7817:
	LOAD -3(LB), R7
	LOAD #5, R10
	SUB R10, R7
	LOAD R7, R1
	BEQ OpCmp_if_in_a8117
	LOAD #1, R1
	BRA OpCmp_fin_in_a8117
OpCmp_if_in_a8117:
	LOAD #0, R1
OpCmp_fin_in_a8117:
	LOAD R1, R9
	LOAD R9, R1
	BNE IfThenElse_else_a8117
	LOAD #0x1.7f218ep0, R10
	LOAD R10, R0
	BRA IfThenElse_fin_a8117
IfThenElse_else_a8117:
	LOAD -3(LB), R7
	LOAD #6, R11
	SUB R11, R7
	LOAD R7, R1
	BEQ OpCmp_if_in_a8417
	LOAD #1, R1
	BRA OpCmp_fin_in_a8417
OpCmp_if_in_a8417:
	LOAD #0, R1
OpCmp_fin_in_a8417:
	LOAD R1, R10
	LOAD R10, R1
	BNE IfThenElse_else_a8417
	LOAD #0x1.3504f4p1, R11
	LOAD R11, R0
	BRA IfThenElse_fin_a8417
IfThenElse_else_a8417:
	LOAD -3(LB), R7
	LOAD #7, R12
	SUB R12, R7
	LOAD R7, R1
	BEQ OpCmp_if_in_a8717
	LOAD #1, R1
	BRA OpCmp_fin_in_a8717
OpCmp_if_in_a8717:
	LOAD #0, R1
OpCmp_fin_in_a8717:
	LOAD R1, R11
	LOAD R11, R1
	BNE IfThenElse_else_a8717
	LOAD #0x1.41bfeep2, R12
	LOAD R12, R0
	BRA IfThenElse_fin_a8717
IfThenElse_else_a8717:
	LOAD -3(LB), R7
	LOAD #8, R5
	SUB R5, R7
	LOAD R7, R1
	BEQ OpCmp_if_in_a9017
	LOAD #1, R1
	BRA OpCmp_fin_in_a9017
OpCmp_if_in_a9017:
	LOAD #0, R1
OpCmp_fin_in_a9017:
	LOAD R1, R12
	LOAD R12, R1
	BNE IfThenElse_else_a9017
	LOAD #0x1.d02968p53, R5
	LOAD R5, R0
	BRA IfThenElse_fin_a9017
IfThenElse_else_a9017:
	LOAD #0x0.0p0, R5
	LOAD R5, R0
IfThenElse_fin_a9017:
IfThenElse_fin_a8717:
IfThenElse_fin_a8417:
IfThenElse_fin_a8117:
IfThenElse_fin_a7817:
IfThenElse_fin_a7517:
IfThenElse_fin_a7217:
IfThenElse_fin_a6917:
IfThenElse_fin_a6612:
	POP R2
	POP R3
	POP R4
	POP R5
	POP R6
	POP R7
	POP R8
	POP R9
	POP R10
	POP R11
	POP R12
	RTS
init.Couple:
	LOAD #0, R2
	LOAD R2, R0
	LOAD -2(LB), R1
	STORE R0, 1(R1)
	LOAD #0, R2
	LOAD R2, R0
	LOAD -2(LB), R1
	STORE R0, 2(R1)
	RTS
init.RangeReduction:
	LOAD #0x1.921fb4p1, R2
	LOAD R2, R0
	LOAD -2(LB), R1
	STORE R0, 1(R1)
	RTS
code.RangeReduction.FirstReductionSin:
	PUSH R6
	PUSH R4
	PUSH R2
	LOAD #0x1.92p1, R2
	STORE R2, 5(LB)
	LOAD #0x1.fb5444p-11, R2
	STORE R2, 6(LB)
	LOAD -3(LB), R2
	LOAD -2(LB), R0
	LOAD 1(R0), R4
	DIV R4, R2
	BOV divisionErr
	INT R2, R2
	STORE R2, 7(LB)
	LOAD -3(LB), R2
	LOAD 7(LB), R4
	FLOAT R4, R4
	LOAD 5(LB), R6
	MUL R6, R4
	BOV over_flow
	SUB R4, R2
	STORE R2, 8(LB)
	LOAD 8(LB), R2
	LOAD 7(LB), R4
	FLOAT R4, R4
	LOAD 6(LB), R6
	MUL R6, R4
	BOV over_flow
	SUB R4, R2
	STORE R2, 8(LB)
	LOAD 7(LB), R4
	LOAD #2, R6
	REM R6, R4
	BOV divisionErr
	LOAD #0, R6
	SUB R6, R4
	LOAD R4, R1
	BEQ OpCmp_if_in_a1212
	LOAD #1, R1
	BRA OpCmp_fin_in_a1212
OpCmp_if_in_a1212:
	LOAD #0, R1
OpCmp_fin_in_a1212:
	LOAD R1, R2
	LOAD R2, R1
	BNE IfThenElse_else_a1212
	LOAD 8(LB), R6
	LOAD R6, R0
	BRA IfThenElse_fin_a1212
IfThenElse_else_a1212:
	LOAD 8(LB), R6
	OPP R6, R6
	LOAD R6, R0
IfThenElse_fin_a1212:
	POP R2
	POP R4
	POP R6
	RTS
code.RangeReduction.FirstReductionCos:
	PUSH R6
	PUSH R4
	PUSH R2
	LOAD #0x1.92p1, R2
	STORE R2, 9(LB)
	LOAD #0x1.fb5444p-11, R2
	STORE R2, 10(LB)
	LOAD -3(LB), R2
	LOAD -2(LB), R0
	LOAD 1(R0), R6
	DIV R6, R2
	BOV divisionErr
	INT R2, R2
	STORE R2, 11(LB)
	LOAD -3(LB), R2
	LOAD 11(LB), R6
	FLOAT R6, R6
	LOAD 9(LB), R4
	MUL R4, R6
	BOV over_flow
	SUB R6, R2
	STORE R2, 12(LB)
	LOAD 12(LB), R2
	LOAD 11(LB), R6
	FLOAT R6, R6
	LOAD 10(LB), R4
	MUL R4, R6
	BOV over_flow
	SUB R6, R2
	STORE R2, 12(LB)
	LOAD 12(LB), R2
	LOAD R2, R0
	POP R2
	POP R4
	POP R6
	RTS
init.BreakPoints:
; instruction new
	NEW #1, R2
	LEA 3(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.Methods
	POP R2
	LOAD R2, R0
	LOAD -2(LB), R1
	STORE R0, 1(R1)
	RTS
code.BreakPoints.breakPoint:
	PUSH R6
	PUSH R4
	PUSH R3
	PUSH R2
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 1(R0), R2
	STORE R2, 0(SP)
	LOAD #0x1.0p1, R6
	STORE R6, -1(SP)
	LOAD -3(LB), R6
	OPP R6, R6
	STORE R6, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #3
	LOAD R0, R6
	LOAD #1, R2
	LOAD -4(LB), R4
	LOAD #8, R3
	QUO R3, R4
	BOV divisionErr
	ADD R4, R2
	FLOAT R2, R2
	MUL R2, R6
	BOV over_flow
	LOAD R6, R0
	POP R2
	POP R3
	POP R4
	POP R6
	RTS
code.BreakPoints.BPOptVal:
	PUSH R10
	PUSH R9
	PUSH R8
	PUSH R6
	PUSH R4
	PUSH R3
	PUSH R2
; instruction new
	NEW #3, R6
	LEA 15(GB), R0
	STORE R0, 0(R6)
	PUSH R6
	BSR init.Couple
	POP R6
	STORE R6, 13(LB)
; appel de methode2
	ADDSP #3
	LOAD -2(LB), R6
	STORE R6, 0(SP)
	LOAD #1, R2
	STORE R2, -1(SP)
	LOAD #0, R2
	STORE R2, -2(SP)
	LOAD 0(SP), R6
	CMP #null, R6
	BEQ pile_pleine
	LOAD 0(R6), R6
	BSR 2(R6)
	SUBSP #3
	LOAD R0, R2
	STORE R2, 14(LB)
	LOAD #0, R2
	STORE R2, 15(LB)
	LOAD #1, R2
	STORE R2, 16(LB)
	LOAD #0, R2
	STORE R2, 17(LB)
While_cond_a1415:
	LOAD 16(LB), R6
	LOAD #5, R4
	SUB R4, R6
	LOAD R6, R1
	BLT OpCmp_if_in_a1415
	LOAD #1, R1
	BRA OpCmp_fin_in_a1415
OpCmp_if_in_a1415:
	LOAD #0, R1
OpCmp_fin_in_a1415:
	LOAD R1, R2
	LOAD R2, R1
	BNE While_fin_a1415
While_cond_a1519:
	LOAD 17(LB), R6
	LOAD #8, R3
	SUB R3, R6
	LOAD R6, R1
	BLT OpCmp_if_in_a1519
	LOAD #1, R1
	BRA OpCmp_fin_in_a1519
OpCmp_if_in_a1519:
	LOAD #0, R1
OpCmp_fin_in_a1519:
	LOAD R1, R4
	LOAD R4, R1
	BNE While_fin_a1519
; appel de methode4
	ADDSP #2
	LOAD -2(LB), R0
	LOAD 1(R0), R6
	STORE R6, 0(SP)
	LOAD 14(LB), R8
	LOAD -3(LB), R9
	SUB R9, R8
	STORE R8, -1(SP)
	LOAD 0(SP), R6
	CMP #null, R6
	BEQ pile_pleine
	LOAD 0(R6), R6
	BSR 4(R6)
	SUBSP #2
	LOAD R0, R8
; appel de methode4
	ADDSP #2
	LOAD -2(LB), R0
	LOAD 1(R0), R6
	STORE R6, 0(SP)
; appel de methode2
	ADDSP #3
	LOAD -2(LB), R9
	STORE R9, 0(SP)
	LOAD 16(LB), R10
	STORE R10, -1(SP)
	LOAD 17(LB), R10
	STORE R10, -2(SP)
	LOAD 0(SP), R9
	CMP #null, R9
	BEQ pile_pleine
	LOAD 0(R9), R9
	BSR 2(R9)
	SUBSP #3
	LOAD R0, R10
	LOAD -3(LB), R9
	SUB R9, R10
	STORE R10, -1(SP)
	LOAD 0(SP), R6
	CMP #null, R6
	BEQ pile_pleine
	LOAD 0(R6), R6
	BSR 4(R6)
	SUBSP #2
	LOAD R0, R10
	SUB R10, R8
	LOAD R8, R1
	BGT OpCmp_if_in_a1619
	LOAD #1, R1
	BRA OpCmp_fin_in_a1619
OpCmp_if_in_a1619:
	LOAD #0, R1
OpCmp_fin_in_a1619:
	LOAD R1, R3
	LOAD R3, R1
	BNE IfThenElse_else_a1619
	LOAD #1, R10
	STORE R10, 15(LB)
; appel de methode2
	ADDSP #3
	LOAD -2(LB), R10
	STORE R10, 0(SP)
	LOAD 16(LB), R8
	STORE R8, -1(SP)
	LOAD 17(LB), R8
	STORE R8, -2(SP)
	LOAD 0(SP), R10
	CMP #null, R10
	BEQ pile_pleine
	LOAD 0(R10), R10
	BSR 2(R10)
	SUBSP #3
	LOAD R0, R8
	STORE R8, 14(LB)
	LOAD 16(LB), R8
	LOAD -2(LB), R1
	STORE R8, 1(R1)
	LOAD 17(LB), R8
	LOAD -2(LB), R1
	STORE R8, 2(R1)
	BRA IfThenElse_fin_a1619
IfThenElse_else_a1619:
IfThenElse_fin_a1619:
	LOAD 17(LB), R3
	LOAD #1, R8
	ADD R8, R3
	STORE R3, 17(LB)
	BRA While_cond_a1519
While_fin_a1519:
	LOAD #0, R4
	STORE R4, 17(LB)
	LOAD 16(LB), R4
	LOAD #1, R3
	ADD R3, R4
	STORE R4, 16(LB)
	BRA While_cond_a1415
While_fin_a1415:
	LOAD 15(LB), R4
	LOAD #0, R3
	SUB R3, R4
	LOAD R4, R1
	BEQ OpCmp_if_in_a2712
	LOAD #1, R1
	BRA OpCmp_fin_in_a2712
OpCmp_if_in_a2712:
	LOAD #0, R1
OpCmp_fin_in_a2712:
	LOAD R1, R2
	LOAD R2, R1
	BNE IfThenElse_else_a2712
	LOAD #1, R3
	LOAD -2(LB), R1
	STORE R3, 1(R1)
	WSTR "1"
	WNL
	LOAD #0, R3
	LOAD -2(LB), R1
	STORE R3, 2(R1)
	BRA IfThenElse_fin_a2712
IfThenElse_else_a2712:
IfThenElse_fin_a2712:
	LOAD 13(LB), R2
	LOAD R2, R0
	POP R2
	POP R3
	POP R4
	POP R6
	POP R8
	POP R9
	POP R10
	RTS
init.Taylor:
; instruction new
	NEW #1, R2
	LEA 3(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.Methods
	POP R2
	LOAD R2, R0
	LOAD -2(LB), R1
	STORE R0, 1(R1)
	RTS
code.Taylor.coefTaylorSinus:
	PUSH R8
	PUSH R4
	PUSH R3
	PUSH R2
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 1(R0), R2
	STORE R2, 0(SP)
	LOAD #0x1.0p0, R3
	OPP R3, R3
	STORE R3, -1(SP)
	LOAD -3(LB), R3
	STORE R3, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #3
	LOAD R0, R3
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 1(R0), R2
	STORE R2, 0(SP)
	LOAD -4(LB), R4
	STORE R4, -1(SP)
	LOAD #2, R4
	LOAD -3(LB), R8
	MUL R8, R4
	BOV over_flow
	LOAD #1, R8
	ADD R8, R4
	STORE R4, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #3
	LOAD R0, R4
	MUL R4, R3
	BOV over_flow
; appel de methode2
	ADDSP #2
	LOAD -2(LB), R0
	LOAD 1(R0), R4
	STORE R4, 0(SP)
	LOAD #2, R2
	LOAD -3(LB), R8
	MUL R8, R2
	BOV over_flow
	LOAD #1, R8
	ADD R8, R2
	STORE R2, -1(SP)
	LOAD 0(SP), R4
	CMP #null, R4
	BEQ pile_pleine
	LOAD 0(R4), R4
	BSR 2(R4)
	SUBSP #2
	LOAD R0, R2
	FLOAT R2, R2
	DIV R2, R3
	BOV divisionErr
	LOAD R3, R0
	POP R2
	POP R3
	POP R4
	POP R8
	RTS
code.Taylor.taylorSinus:
	PUSH R8
	PUSH R4
	PUSH R3
	PUSH R2
	LOAD #0, R3
	FLOAT R3, R3
	STORE R3, 18(LB)
	LOAD #0, R3
	STORE R3, 19(LB)
While_cond_a2015:
	LOAD 19(LB), R2
	LOAD -4(LB), R4
	SUB R4, R2
	LOAD R2, R1
	BLT OpCmp_if_in_a2015
	LOAD #1, R1
	BRA OpCmp_fin_in_a2015
OpCmp_if_in_a2015:
	LOAD #0, R1
OpCmp_fin_in_a2015:
	LOAD R1, R3
	LOAD R3, R1
	BNE While_fin_a2015
	LOAD 18(LB), R4
; appel de methode2
	ADDSP #3
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 19(LB), R8
	STORE R8, -1(SP)
	LOAD -3(LB), R8
	STORE R8, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 2(R2)
	SUBSP #3
	LOAD R0, R8
	ADD R8, R4
	STORE R4, 18(LB)
	LOAD 19(LB), R4
	LOAD #1, R8
	ADD R8, R4
	STORE R4, 19(LB)
	BRA While_cond_a2015
While_fin_a2015:
	LOAD 18(LB), R3
	LOAD R3, R0
	POP R2
	POP R3
	POP R4
	POP R8
	RTS
code.Taylor.coefTaylorCosinus:
	PUSH R8
	PUSH R4
	PUSH R3
	PUSH R2
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 1(R0), R3
	STORE R3, 0(SP)
	LOAD #0x1.0p0, R4
	OPP R4, R4
	STORE R4, -1(SP)
	LOAD -3(LB), R4
	STORE R4, -2(SP)
	LOAD 0(SP), R3
	CMP #null, R3
	BEQ pile_pleine
	LOAD 0(R3), R3
	BSR 3(R3)
	SUBSP #3
	LOAD R0, R4
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 1(R0), R3
	STORE R3, 0(SP)
	LOAD -4(LB), R8
	STORE R8, -1(SP)
	LOAD #2, R8
	LOAD -3(LB), R2
	MUL R2, R8
	BOV over_flow
	STORE R8, -2(SP)
	LOAD 0(SP), R3
	CMP #null, R3
	BEQ pile_pleine
	LOAD 0(R3), R3
	BSR 3(R3)
	SUBSP #3
	LOAD R0, R8
	MUL R8, R4
	BOV over_flow
; appel de methode2
	ADDSP #2
	LOAD -2(LB), R0
	LOAD 1(R0), R8
	STORE R8, 0(SP)
	LOAD #2, R3
	LOAD -3(LB), R2
	MUL R2, R3
	BOV over_flow
	STORE R3, -1(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 2(R8)
	SUBSP #2
	LOAD R0, R3
	FLOAT R3, R3
	DIV R3, R4
	BOV divisionErr
	LOAD R4, R0
	POP R2
	POP R3
	POP R4
	POP R8
	RTS
code.Taylor.taylorCosinus:
	PUSH R8
	PUSH R4
	PUSH R3
	PUSH R2
	LOAD #0, R4
	FLOAT R4, R4
	STORE R4, 20(LB)
	LOAD #0, R4
	STORE R4, 21(LB)
While_cond_a3415:
	LOAD 21(LB), R3
	LOAD -4(LB), R8
	SUB R8, R3
	LOAD R3, R1
	BLT OpCmp_if_in_a3415
	LOAD #1, R1
	BRA OpCmp_fin_in_a3415
OpCmp_if_in_a3415:
	LOAD #0, R1
OpCmp_fin_in_a3415:
	LOAD R1, R4
	LOAD R4, R1
	BNE While_fin_a3415
	LOAD 20(LB), R8
; appel de methode4
	ADDSP #3
	LOAD -2(LB), R3
	STORE R3, 0(SP)
	LOAD 21(LB), R2
	STORE R2, -1(SP)
	LOAD -3(LB), R2
	STORE R2, -2(SP)
	LOAD 0(SP), R3
	CMP #null, R3
	BEQ pile_pleine
	LOAD 0(R3), R3
	BSR 4(R3)
	SUBSP #3
	LOAD R0, R2
	ADD R2, R8
	STORE R8, 20(LB)
	LOAD 21(LB), R8
	LOAD #1, R2
	ADD R2, R8
	STORE R8, 21(LB)
	BRA While_cond_a3415
While_fin_a3415:
	LOAD 20(LB), R4
	LOAD R4, R0
	POP R2
	POP R3
	POP R4
	POP R8
	RTS
code.Taylor.coefTaylorArctan:
	PUSH R8
	PUSH R4
	PUSH R3
	PUSH R2
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 1(R0), R4
	STORE R4, 0(SP)
	LOAD #0x1.0p0, R8
	OPP R8, R8
	STORE R8, -1(SP)
	LOAD -3(LB), R8
	STORE R8, -2(SP)
	LOAD 0(SP), R4
	CMP #null, R4
	BEQ pile_pleine
	LOAD 0(R4), R4
	BSR 3(R4)
	SUBSP #3
	LOAD R0, R8
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 1(R0), R4
	STORE R4, 0(SP)
	LOAD -4(LB), R2
	STORE R2, -1(SP)
	LOAD #2, R2
	LOAD -3(LB), R3
	MUL R3, R2
	BOV over_flow
	LOAD #1, R3
	ADD R3, R2
	STORE R2, -2(SP)
	LOAD 0(SP), R4
	CMP #null, R4
	BEQ pile_pleine
	LOAD 0(R4), R4
	BSR 3(R4)
	SUBSP #3
	LOAD R0, R2
	MUL R2, R8
	BOV over_flow
	LOAD #2, R2
	LOAD -3(LB), R4
	MUL R4, R2
	BOV over_flow
	LOAD #1, R4
	ADD R4, R2
	FLOAT R2, R2
	DIV R2, R8
	BOV divisionErr
	LOAD R8, R0
	POP R2
	POP R3
	POP R4
	POP R8
	RTS
code.Taylor.taylorArctan:
	PUSH R8
	PUSH R4
	PUSH R3
	PUSH R2
	LOAD #0, R8
	FLOAT R8, R8
	STORE R8, 22(LB)
	LOAD #0, R8
	STORE R8, 23(LB)
While_cond_a4815:
	LOAD 23(LB), R2
	LOAD -4(LB), R4
	SUB R4, R2
	LOAD R2, R1
	BLT OpCmp_if_in_a4815
	LOAD #1, R1
	BRA OpCmp_fin_in_a4815
OpCmp_if_in_a4815:
	LOAD #0, R1
OpCmp_fin_in_a4815:
	LOAD R1, R8
	LOAD R8, R1
	BNE While_fin_a4815
	LOAD 22(LB), R4
; appel de methode6
	ADDSP #3
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD 23(LB), R3
	STORE R3, -1(SP)
	LOAD -3(LB), R3
	STORE R3, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 6(R2)
	SUBSP #3
	LOAD R0, R3
	ADD R3, R4
	STORE R4, 22(LB)
	LOAD 23(LB), R4
	LOAD #1, R3
	ADD R3, R4
	STORE R4, 23(LB)
	BRA While_cond_a4815
While_fin_a4815:
	LOAD 22(LB), R8
	LOAD R8, R0
	POP R2
	POP R3
	POP R4
	POP R8
	RTS
code.Taylor.coefTaylorArcsin:
	PUSH R10
	PUSH R8
	PUSH R4
	PUSH R3
	PUSH R2
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 1(R0), R8
	STORE R8, 0(SP)
	LOAD #0x1.0p0, R4
	OPP R4, R4
	STORE R4, -1(SP)
	LOAD -3(LB), R4
	STORE R4, -2(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 3(R8)
	SUBSP #3
	LOAD R0, R4
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 1(R0), R8
	STORE R8, 0(SP)
	LOAD -4(LB), R3
	STORE R3, -1(SP)
	LOAD #2, R3
	LOAD -3(LB), R2
	MUL R2, R3
	BOV over_flow
	LOAD #1, R2
	ADD R2, R3
	STORE R3, -2(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 3(R8)
	SUBSP #3
	LOAD R0, R3
	MUL R3, R4
	BOV over_flow
; appel de methode2
	ADDSP #2
	LOAD -2(LB), R0
	LOAD 1(R0), R3
	STORE R3, 0(SP)
	LOAD #2, R8
	LOAD -3(LB), R2
	MUL R2, R8
	BOV over_flow
	STORE R8, -1(SP)
	LOAD 0(SP), R3
	CMP #null, R3
	BEQ pile_pleine
	LOAD 0(R3), R3
	BSR 2(R3)
	SUBSP #2
	LOAD R0, R8
	FLOAT R8, R8
	MUL R8, R4
	BOV over_flow
	LOAD #2, R8
	LOAD -3(LB), R3
	MUL R3, R8
	BOV over_flow
	LOAD #1, R3
	ADD R3, R8
	FLOAT R8, R8
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 1(R0), R3
	STORE R3, 0(SP)
	LOAD #0x1.0p1, R2
	STORE R2, -1(SP)
	LOAD #2, R2
	LOAD -3(LB), R10
	MUL R10, R2
	BOV over_flow
	STORE R2, -2(SP)
	LOAD 0(SP), R3
	CMP #null, R3
	BEQ pile_pleine
	LOAD 0(R3), R3
	BSR 3(R3)
	SUBSP #3
	LOAD R0, R2
	MUL R2, R8
	BOV over_flow
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 1(R0), R2
	STORE R2, 0(SP)
; appel de methode2
	ADDSP #2
	LOAD -2(LB), R0
	LOAD 1(R0), R3
	STORE R3, 0(SP)
	LOAD -3(LB), R10
	STORE R10, -1(SP)
	LOAD 0(SP), R3
	CMP #null, R3
	BEQ pile_pleine
	LOAD 0(R3), R3
	BSR 2(R3)
	SUBSP #2
	LOAD R0, R10
	FLOAT R10, R10
	STORE R10, -1(SP)
	LOAD #2, R10
	STORE R10, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #3
	LOAD R0, R10
	MUL R10, R8
	BOV over_flow
	DIV R8, R4
	BOV divisionErr
	LOAD R4, R0
	POP R2
	POP R3
	POP R4
	POP R8
	POP R10
	RTS
code.Taylor.taylorArcsin:
	PUSH R10
	PUSH R8
	PUSH R4
	PUSH R2
	LOAD #0, R4
	FLOAT R4, R4
	STORE R4, 24(LB)
	LOAD #0, R4
	STORE R4, 25(LB)
While_cond_a6315:
	LOAD 25(LB), R8
	LOAD -4(LB), R10
	SUB R10, R8
	LOAD R8, R1
	BLT OpCmp_if_in_a6315
	LOAD #1, R1
	BRA OpCmp_fin_in_a6315
OpCmp_if_in_a6315:
	LOAD #0, R1
OpCmp_fin_in_a6315:
	LOAD R1, R4
	LOAD R4, R1
	BNE While_fin_a6315
	LOAD 24(LB), R10
; appel de methode8
	ADDSP #3
	LOAD -2(LB), R8
	STORE R8, 0(SP)
	LOAD 25(LB), R2
	STORE R2, -1(SP)
	LOAD -3(LB), R2
	STORE R2, -2(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 8(R8)
	SUBSP #3
	LOAD R0, R2
	ADD R2, R10
	STORE R10, 24(LB)
	LOAD 25(LB), R10
	LOAD #1, R2
	ADD R2, R10
	STORE R10, 25(LB)
	BRA While_cond_a6315
While_fin_a6315:
	LOAD 24(LB), R4
	LOAD R4, R0
	POP R2
	POP R4
	POP R8
	POP R10
	RTS
init.ChebyApproxi32:
; instruction new
	NEW #1, R4
	LEA 3(GB), R0
	STORE R0, 0(R4)
	PUSH R4
	BSR init.Methods
	POP R4
	LOAD R4, R0
	LOAD -2(LB), R1
	STORE R0, 1(R1)
	RTS
code.ChebyApproxi32.ChebychevActan:
	PUSH R10
	PUSH R8
	PUSH R4
	PUSH R3
	PUSH R2
	LOAD #0x1.138b78p7, R4
	STORE R4, 26(LB)
	LOAD #0x1.379bf6p8, R4
	STORE R4, 27(LB)
	LOAD #0x1.e68816p7, R4
	STORE R4, 28(LB)
	LOAD #0x1.3078c6p6, R4
	STORE R4, 29(LB)
	LOAD #0x1.043f2p3, R4
	STORE R4, 30(LB)
	LOAD #0x1.12db8ap-3, R4
	STORE R4, 31(LB)
	LOAD #0x1.138b78p7, R4
	STORE R4, 32(LB)
	LOAD #0x1.65888ap8, R4
	STORE R4, 33(LB)
	LOAD #0x1.4ee39cp8, R4
	STORE R4, 34(LB)
	LOAD #0x1.0fd872p7, R4
	STORE R4, 35(LB)
	LOAD #0x1.63b09ap4, R4
	STORE R4, 36(LB)
	LOAD 26(LB), R4
	LOAD -3(LB), R10
	MUL R10, R4
	BOV over_flow
	LOAD 27(LB), R10
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 1(R0), R2
	STORE R2, 0(SP)
	LOAD -3(LB), R8
	STORE R8, -1(SP)
	LOAD #3, R8
	STORE R8, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #3
	LOAD R0, R8
	MUL R8, R10
	BOV over_flow
	ADD R10, R4
	LOAD 28(LB), R10
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 1(R0), R8
	STORE R8, 0(SP)
	LOAD -3(LB), R2
	STORE R2, -1(SP)
	LOAD #5, R2
	STORE R2, -2(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 3(R8)
	SUBSP #3
	LOAD R0, R2
	MUL R2, R10
	BOV over_flow
	ADD R10, R4
	LOAD 29(LB), R10
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 1(R0), R2
	STORE R2, 0(SP)
	LOAD -3(LB), R8
	STORE R8, -1(SP)
	LOAD #7, R8
	STORE R8, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #3
	LOAD R0, R8
	MUL R8, R10
	BOV over_flow
	ADD R10, R4
	LOAD 30(LB), R10
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 1(R0), R8
	STORE R8, 0(SP)
	LOAD -3(LB), R2
	STORE R2, -1(SP)
	LOAD #9, R2
	STORE R2, -2(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 3(R8)
	SUBSP #3
	LOAD R0, R2
	MUL R2, R10
	BOV over_flow
	ADD R10, R4
	LOAD 31(LB), R10
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 1(R0), R2
	STORE R2, 0(SP)
	LOAD -3(LB), R8
	STORE R8, -1(SP)
	LOAD #11, R8
	STORE R8, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #3
	LOAD R0, R8
	MUL R8, R10
	BOV over_flow
	ADD R10, R4
	LOAD 32(LB), R10
	LOAD 33(LB), R8
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 1(R0), R2
	STORE R2, 0(SP)
	LOAD -3(LB), R3
	STORE R3, -1(SP)
	LOAD #2, R3
	STORE R3, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #3
	LOAD R0, R3
	MUL R3, R8
	BOV over_flow
	ADD R8, R10
	LOAD 34(LB), R8
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 1(R0), R3
	STORE R3, 0(SP)
	LOAD -3(LB), R2
	STORE R2, -1(SP)
	LOAD #4, R2
	STORE R2, -2(SP)
	LOAD 0(SP), R3
	CMP #null, R3
	BEQ pile_pleine
	LOAD 0(R3), R3
	BSR 3(R3)
	SUBSP #3
	LOAD R0, R2
	MUL R2, R8
	BOV over_flow
	ADD R8, R10
	LOAD 35(LB), R8
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 1(R0), R2
	STORE R2, 0(SP)
	LOAD -3(LB), R3
	STORE R3, -1(SP)
	LOAD #6, R3
	STORE R3, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #3
	LOAD R0, R3
	MUL R3, R8
	BOV over_flow
	ADD R8, R10
	LOAD 36(LB), R8
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 1(R0), R3
	STORE R3, 0(SP)
	LOAD -3(LB), R2
	STORE R2, -1(SP)
	LOAD #8, R2
	STORE R2, -2(SP)
	LOAD 0(SP), R3
	CMP #null, R3
	BEQ pile_pleine
	LOAD 0(R3), R3
	BSR 3(R3)
	SUBSP #3
	LOAD R0, R2
	MUL R2, R8
	BOV over_flow
	ADD R8, R10
	DIV R10, R4
	BOV divisionErr
	LOAD R4, R0
	POP R2
	POP R3
	POP R4
	POP R8
	POP R10
	RTS
code.ChebyApproxi32.ChebychevSinus:
	PUSH R10
	PUSH R8
	PUSH R4
	PUSH R2
	LOAD #0x1.555556p-3, R4
	OPP R4, R4
	STORE R4, 37(LB)
	LOAD #0x1.111112p-7, R4
	STORE R4, 38(LB)
	LOAD #0x1.a01a02p-13, R4
	OPP R4, R4
	STORE R4, 39(LB)
	LOAD #0x1.71dc0ep-19, R4
	STORE R4, 40(LB)
	LOAD -3(LB), R4
	LOAD 37(LB), R10
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 1(R0), R8
	STORE R8, 0(SP)
	LOAD -3(LB), R2
	STORE R2, -1(SP)
	LOAD #3, R2
	STORE R2, -2(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 3(R8)
	SUBSP #3
	LOAD R0, R2
	MUL R2, R10
	BOV over_flow
	ADD R10, R4
	LOAD 38(LB), R10
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 1(R0), R2
	STORE R2, 0(SP)
	LOAD -3(LB), R8
	STORE R8, -1(SP)
	LOAD #5, R8
	STORE R8, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #3
	LOAD R0, R8
	MUL R8, R10
	BOV over_flow
	ADD R10, R4
	LOAD 39(LB), R10
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 1(R0), R8
	STORE R8, 0(SP)
	LOAD -3(LB), R2
	STORE R2, -1(SP)
	LOAD #7, R2
	STORE R2, -2(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 3(R8)
	SUBSP #3
	LOAD R0, R2
	MUL R2, R10
	BOV over_flow
	ADD R10, R4
	LOAD 40(LB), R10
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 1(R0), R2
	STORE R2, 0(SP)
	LOAD -3(LB), R8
	STORE R8, -1(SP)
	LOAD #9, R8
	STORE R8, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #3
	LOAD R0, R8
	MUL R8, R10
	BOV over_flow
	ADD R10, R4
	LOAD R4, R0
	POP R2
	POP R4
	POP R8
	POP R10
	RTS
code.ChebyApproxi32.ChebychevCosinus:
	PUSH R10
	PUSH R8
	PUSH R4
	PUSH R2
	LOAD #0x1.0p-1, R4
	OPP R4, R4
	STORE R4, 41(LB)
	LOAD #0x1.555556p-5, R4
	STORE R4, 42(LB)
	LOAD #0x1.6c16c2p-10, R4
	OPP R4, R4
	STORE R4, 43(LB)
	LOAD #0x1.a01a02p-16, R4
	STORE R4, 44(LB)
	LOAD #0x1.27e354p-22, R4
	OPP R4, R4
	STORE R4, 45(LB)
	LOAD #1, R4
	FLOAT R4, R4
	LOAD 41(LB), R10
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 1(R0), R8
	STORE R8, 0(SP)
	LOAD -3(LB), R2
	STORE R2, -1(SP)
	LOAD #2, R2
	STORE R2, -2(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 3(R8)
	SUBSP #3
	LOAD R0, R2
	MUL R2, R10
	BOV over_flow
	ADD R10, R4
	LOAD 42(LB), R10
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 1(R0), R2
	STORE R2, 0(SP)
	LOAD -3(LB), R8
	STORE R8, -1(SP)
	LOAD #4, R8
	STORE R8, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #3
	LOAD R0, R8
	MUL R8, R10
	BOV over_flow
	ADD R10, R4
	LOAD 43(LB), R10
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 1(R0), R8
	STORE R8, 0(SP)
	LOAD -3(LB), R2
	STORE R2, -1(SP)
	LOAD #6, R2
	STORE R2, -2(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 3(R8)
	SUBSP #3
	LOAD R0, R2
	MUL R2, R10
	BOV over_flow
	ADD R10, R4
	LOAD 44(LB), R10
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 1(R0), R2
	STORE R2, 0(SP)
	LOAD -3(LB), R8
	STORE R8, -1(SP)
	LOAD #8, R8
	STORE R8, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #3
	LOAD R0, R8
	MUL R8, R10
	BOV over_flow
	ADD R10, R4
	LOAD 45(LB), R10
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 1(R0), R8
	STORE R8, 0(SP)
	LOAD -3(LB), R2
	STORE R2, -1(SP)
	LOAD #10, R2
	STORE R2, -2(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 3(R8)
	SUBSP #3
	LOAD R0, R2
	MUL R2, R10
	BOV over_flow
	ADD R10, R4
	LOAD R4, R0
	POP R2
	POP R4
	POP R8
	POP R10
	RTS
init.Chebychev:
	LOAD #0x1.921fb4p1, R4
	LOAD R4, R0
	LOAD -2(LB), R1
	STORE R0, 1(R1)
; instruction new
	NEW #1, R4
	LEA 9(GB), R0
	STORE R0, 0(R4)
	PUSH R4
	BSR init.ChebychevValues
	POP R4
	LOAD R4, R0
	LOAD -2(LB), R1
	STORE R0, 2(R1)
; instruction new
	NEW #3, R4
	LEA 15(GB), R0
	STORE R0, 0(R4)
	PUSH R4
	BSR init.Couple
	POP R4
	LOAD R4, R0
	LOAD -2(LB), R1
	STORE R0, 3(R1)
; instruction new
	NEW #1, R4
	LEA 3(GB), R0
	STORE R0, 0(R4)
	PUSH R4
	BSR init.Methods
	POP R4
	LOAD R4, R0
	LOAD -2(LB), R1
	STORE R0, 4(R1)
; instruction new
	NEW #2, R4
	LEA 17(GB), R0
	STORE R0, 0(R4)
	PUSH R4
	BSR init.RangeReduction
	POP R4
	LOAD R4, R0
	LOAD -2(LB), R1
	STORE R0, 5(R1)
; instruction new
	NEW #2, R4
	LEA 35(GB), R0
	STORE R0, 0(R4)
	PUSH R4
	BSR init.ChebyApproxi32
	POP R4
	LOAD R4, R0
	LOAD -2(LB), R1
	STORE R0, 6(R1)
; instruction new
	NEW #2, R4
	LEA 21(GB), R0
	STORE R0, 0(R4)
	PUSH R4
	BSR init.BreakPoints
	POP R4
	LOAD R4, R0
	LOAD -2(LB), R1
	STORE R0, 7(R1)
	RTS
code.Chebychev.sinCheb:
	PUSH R10
	PUSH R8
	PUSH R4
	PUSH R3
	PUSH R2
; instruction new
	NEW #3, R4
	LEA 15(GB), R0
	STORE R0, 0(R4)
	PUSH R4
	BSR init.Couple
	POP R4
	STORE R4, 46(LB)
	LOAD #0x0.0p0, R4
	STORE R4, 47(LB)
	LOAD #0x0.0p0, R4
	STORE R4, 48(LB)
	LOAD #0x0.0p0, R4
	STORE R4, 49(LB)
	LOAD -3(LB), R2
	LOAD -2(LB), R0
	LOAD 1(R0), R8
	LOAD #4, R3
	FLOAT R3, R3
	DIV R3, R8
	BOV divisionErr
	SUB R8, R2
	LOAD R2, R1
	BLE OpCmp_if_in_a13212
	LOAD #1, R1
	BRA OpCmp_fin_in_a13212
OpCmp_if_in_a13212:
	LOAD #0, R1
OpCmp_fin_in_a13212:
	LOAD R1, R10
	LOAD R10, R1
	BNE And_else_in_a13212
	LOAD -3(LB), R8
	LOAD #0, R2
	FLOAT R2, R2
	SUB R2, R8
	LOAD R8, R1
	BGE OpCmp_if_in_a13229
	LOAD #1, R1
	BRA OpCmp_fin_in_a13229
OpCmp_if_in_a13229:
	LOAD #0, R1
OpCmp_fin_in_a13229:
	LOAD R1, R10
	LOAD R10, R1
	BNE And_else_in_a13212
	LOAD #0, R1
	BRA And_fin_in_a13212
And_else_in_a13212:
	LOAD #1, R1
And_fin_in_a13212:
	LOAD R1, R4
	LOAD R4, R1
	BNE IfThenElse_else_a13212
; appel de methode4
	ADDSP #2
	LOAD -2(LB), R0
	LOAD 4(R0), R2
	STORE R2, 0(SP)
	LOAD -3(LB), R8
	STORE R8, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 4(R2)
	SUBSP #2
	LOAD R0, R8
	LOAD #0x1.0p-5, R2
	SUB R2, R8
	LOAD R8, R1
	BLE OpCmp_if_in_a13315
	LOAD #1, R1
	BRA OpCmp_fin_in_a13315
OpCmp_if_in_a13315:
	LOAD #0, R1
OpCmp_fin_in_a13315:
	LOAD R1, R10
	LOAD R10, R1
	BNE IfThenElse_else_a13315
; appel de methode3
	ADDSP #2
	LOAD -2(LB), R0
	LOAD 6(R0), R2
	STORE R2, 0(SP)
	LOAD -3(LB), R8
	STORE R8, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #2
	LOAD R0, R8
	LOAD R8, R0
	BRA IfThenElse_fin_a13315
IfThenElse_else_a13315:
; appel de methode3
	ADDSP #2
	LOAD -2(LB), R0
	LOAD 7(R0), R8
	STORE R8, 0(SP)
	LOAD -3(LB), R2
	STORE R2, -1(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 3(R8)
	SUBSP #2
	LOAD R0, R2
	STORE R2, 46(LB)
; appel de methode2
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 7(R0), R2
	STORE R2, 0(SP)
	LOAD 46(LB), R8
	LOAD 1(R8), R8
	STORE R8, -1(SP)
	LOAD 46(LB), R8
	LOAD 2(R8), R8
	STORE R8, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 2(R2)
	SUBSP #3
	LOAD R0, R8
	STORE R8, 47(LB)
	LOAD -3(LB), R8
	LOAD 47(LB), R2
	SUB R2, R8
	STORE R8, 48(LB)
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 2(R0), R8
	STORE R8, 0(SP)
	LOAD 46(LB), R2
	LOAD 1(R2), R2
	STORE R2, -1(SP)
	LOAD 46(LB), R2
	LOAD 2(R2), R2
	STORE R2, -2(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 3(R8)
	SUBSP #3
	LOAD R0, R2
; appel de methode4
	ADDSP #2
	LOAD -2(LB), R0
	LOAD 6(R0), R8
	STORE R8, 0(SP)
	LOAD 48(LB), R2
	STORE R2, -1(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 4(R8)
	SUBSP #2
	LOAD R0, R2
	MUL R2, R2
	BOV over_flow
; appel de methode2
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 2(R0), R2
	STORE R2, 0(SP)
	LOAD 46(LB), R8
	LOAD 1(R8), R8
	STORE R8, -1(SP)
	LOAD 46(LB), R8
	LOAD 2(R8), R8
	STORE R8, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 2(R2)
	SUBSP #3
	LOAD R0, R8
; appel de methode3
	ADDSP #2
	LOAD -2(LB), R0
	LOAD 6(R0), R2
	STORE R2, 0(SP)
	LOAD 48(LB), R8
	STORE R8, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #2
	LOAD R0, R8
	MUL R8, R8
	BOV over_flow
	ADD R8, R2
	LOAD R2, R0
IfThenElse_fin_a13315:
	BRA IfThenElse_fin_a13212
IfThenElse_else_a13212:
	LOAD -3(LB), R2
	LOAD #0, R8
	FLOAT R8, R8
	SUB R8, R2
	LOAD R2, R1
	BLT OpCmp_if_in_a14517
	LOAD #1, R1
	BRA OpCmp_fin_in_a14517
OpCmp_if_in_a14517:
	LOAD #0, R1
OpCmp_fin_in_a14517:
	LOAD R1, R10
	LOAD R10, R1
	BNE IfThenElse_else_a14517
; appel de methode2
	ADDSP #2
	LOAD -2(LB), R8
	STORE R8, 0(SP)
	LOAD -3(LB), R2
	OPP R2, R2
	STORE R2, -1(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 2(R8)
	SUBSP #2
	LOAD R0, R2
	OPP R2, R2
	LOAD R2, R0
	BRA IfThenElse_fin_a14517
IfThenElse_else_a14517:
	LOAD -3(LB), R8
	LOAD -2(LB), R0
	LOAD 1(R0), R8
	SUB R8, R8
	LOAD R8, R1
	BGT OpCmp_if_in_a15016
	LOAD #1, R1
	BRA OpCmp_fin_in_a15016
OpCmp_if_in_a15016:
	LOAD #0, R1
OpCmp_fin_in_a15016:
	LOAD R1, R2
	LOAD R2, R1
	BNE IfThenElse_else_a15016
; appel de methode2
	ADDSP #2
	LOAD -2(LB), R0
	LOAD 5(R0), R8
	STORE R8, 0(SP)
	LOAD -3(LB), R8
	STORE R8, -1(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 2(R8)
	SUBSP #2
	LOAD R0, R8
	STORE R8, 49(LB)
; appel de methode2
	ADDSP #2
	LOAD -2(LB), R8
	STORE R8, 0(SP)
	LOAD 49(LB), R8
	STORE R8, -1(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 2(R8)
	SUBSP #2
	LOAD R0, R8
	LOAD R8, R0
	BRA IfThenElse_fin_a15016
IfThenElse_else_a15016:
	LOAD -3(LB), R8
	LOAD -2(LB), R0
	LOAD 1(R0), R2
	LOAD #2, R8
	FLOAT R8, R8
	DIV R8, R2
	BOV divisionErr
	SUB R2, R8
	LOAD R8, R1
	BGT OpCmp_if_in_a15521
	LOAD #1, R1
	BRA OpCmp_fin_in_a15521
OpCmp_if_in_a15521:
	LOAD #0, R1
OpCmp_fin_in_a15521:
	LOAD R1, R8
	LOAD R8, R1
	BNE IfThenElse_else_a15521
; appel de methode3
	ADDSP #2
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD -2(LB), R0
	LOAD 1(R0), R8
	LOAD #2, R8
	FLOAT R8, R8
	DIV R8, R8
	BOV divisionErr
	LOAD -3(LB), R8
	SUB R8, R8
	STORE R8, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #2
	LOAD R0, R8
	LOAD R8, R0
	BRA IfThenElse_fin_a15521
IfThenElse_else_a15521:
	LOAD #2, R8
	FLOAT R8, R8
; appel de methode2
	ADDSP #2
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD -3(LB), R8
	LOAD #2, R2
	FLOAT R2, R2
	DIV R2, R8
	BOV divisionErr
	STORE R8, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 2(R2)
	SUBSP #2
	LOAD R0, R8
	MUL R8, R8
	BOV over_flow
; appel de methode3
	ADDSP #2
	LOAD -2(LB), R8
	STORE R8, 0(SP)
	LOAD -3(LB), R2
	LOAD #2, R2
	FLOAT R2, R2
	DIV R2, R2
	BOV divisionErr
	STORE R2, -1(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 3(R8)
	SUBSP #2
	LOAD R0, R2
	MUL R2, R8
	BOV over_flow
	LOAD R8, R0
IfThenElse_fin_a15521:
IfThenElse_fin_a15016:
IfThenElse_fin_a14517:
IfThenElse_fin_a13212:
	POP R2
	POP R3
	POP R4
	POP R8
	POP R10
	RTS
code.Chebychev.cosCheb:
	PUSH R10
	PUSH R8
	PUSH R4
	PUSH R2
; instruction new
	NEW #3, R4
	LEA 15(GB), R0
	STORE R0, 0(R4)
	PUSH R4
	BSR init.Couple
	POP R4
	STORE R4, 50(LB)
	LOAD #0x0.0p0, R4
	STORE R4, 51(LB)
	LOAD #0x0.0p0, R4
	STORE R4, 52(LB)
	LOAD #0x0.0p0, R4
	STORE R4, 53(LB)
	LOAD -3(LB), R2
	LOAD -2(LB), R0
	LOAD 1(R0), R8
	LOAD #4, R8
	FLOAT R8, R8
	DIV R8, R8
	BOV divisionErr
	SUB R8, R2
	LOAD R2, R1
	BLE OpCmp_if_in_a17212
	LOAD #1, R1
	BRA OpCmp_fin_in_a17212
OpCmp_if_in_a17212:
	LOAD #0, R1
OpCmp_fin_in_a17212:
	LOAD R1, R10
	LOAD R10, R1
	BNE And_else_in_a17212
	LOAD -3(LB), R8
	LOAD #0, R2
	FLOAT R2, R2
	SUB R2, R8
	LOAD R8, R1
	BGE OpCmp_if_in_a17229
	LOAD #1, R1
	BRA OpCmp_fin_in_a17229
OpCmp_if_in_a17229:
	LOAD #0, R1
OpCmp_fin_in_a17229:
	LOAD R1, R10
	LOAD R10, R1
	BNE And_else_in_a17212
	LOAD #0, R1
	BRA And_fin_in_a17212
And_else_in_a17212:
	LOAD #1, R1
And_fin_in_a17212:
	LOAD R1, R4
	LOAD R4, R1
	BNE IfThenElse_else_a17212
; appel de methode4
	ADDSP #2
	LOAD -2(LB), R0
	LOAD 4(R0), R2
	STORE R2, 0(SP)
	LOAD -3(LB), R8
	STORE R8, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 4(R2)
	SUBSP #2
	LOAD R0, R8
	LOAD #0x1.0p-5, R2
	SUB R2, R8
	LOAD R8, R1
	BLE OpCmp_if_in_a17315
	LOAD #1, R1
	BRA OpCmp_fin_in_a17315
OpCmp_if_in_a17315:
	LOAD #0, R1
OpCmp_fin_in_a17315:
	LOAD R1, R10
	LOAD R10, R1
	BNE IfThenElse_else_a17315
; appel de methode4
	ADDSP #2
	LOAD -2(LB), R0
	LOAD 6(R0), R2
	STORE R2, 0(SP)
	LOAD -3(LB), R8
	STORE R8, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 4(R2)
	SUBSP #2
	LOAD R0, R8
	LOAD R8, R0
	BRA IfThenElse_fin_a17315
IfThenElse_else_a17315:
; appel de methode3
	ADDSP #2
	LOAD -2(LB), R0
	LOAD 7(R0), R8
	STORE R8, 0(SP)
	LOAD -3(LB), R2
	STORE R2, -1(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 3(R8)
	SUBSP #2
	LOAD R0, R2
	STORE R2, 50(LB)
; appel de methode2
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 7(R0), R2
	STORE R2, 0(SP)
	LOAD 50(LB), R8
	LOAD 1(R8), R8
	STORE R8, -1(SP)
	LOAD 50(LB), R8
	LOAD 2(R8), R8
	STORE R8, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 2(R2)
	SUBSP #3
	LOAD R0, R8
	STORE R8, 51(LB)
	LOAD -3(LB), R8
	LOAD 51(LB), R2
	SUB R2, R8
	STORE R8, 52(LB)
; appel de methode2
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 2(R0), R8
	STORE R8, 0(SP)
	LOAD 50(LB), R2
	LOAD 1(R2), R2
	STORE R2, -1(SP)
	LOAD 50(LB), R2
	LOAD 2(R2), R2
	STORE R2, -2(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 2(R8)
	SUBSP #3
	LOAD R0, R2
; appel de methode4
	ADDSP #2
	LOAD -2(LB), R0
	LOAD 6(R0), R8
	STORE R8, 0(SP)
	LOAD 52(LB), R2
	STORE R2, -1(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 4(R8)
	SUBSP #2
	LOAD R0, R2
	MUL R2, R2
	BOV over_flow
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 2(R0), R2
	STORE R2, 0(SP)
	LOAD 50(LB), R8
	LOAD 1(R8), R8
	STORE R8, -1(SP)
	LOAD 50(LB), R8
	LOAD 2(R8), R8
	STORE R8, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #3
	LOAD R0, R8
; appel de methode3
	ADDSP #2
	LOAD -2(LB), R0
	LOAD 6(R0), R2
	STORE R2, 0(SP)
	LOAD 52(LB), R8
	STORE R8, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #2
	LOAD R0, R8
	MUL R8, R8
	BOV over_flow
	SUB R8, R2
	LOAD R2, R0
IfThenElse_fin_a17315:
	BRA IfThenElse_fin_a17212
IfThenElse_else_a17212:
	LOAD -3(LB), R2
	LOAD #0, R8
	FLOAT R8, R8
	SUB R8, R2
	LOAD R2, R1
	BLT OpCmp_if_in_a18417
	LOAD #1, R1
	BRA OpCmp_fin_in_a18417
OpCmp_if_in_a18417:
	LOAD #0, R1
OpCmp_fin_in_a18417:
	LOAD R1, R10
	LOAD R10, R1
	BNE IfThenElse_else_a18417
; appel de methode3
	ADDSP #2
	LOAD -2(LB), R8
	STORE R8, 0(SP)
	LOAD -3(LB), R2
	OPP R2, R2
	STORE R2, -1(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 3(R8)
	SUBSP #2
	LOAD R0, R2
	LOAD R2, R0
	BRA IfThenElse_fin_a18417
IfThenElse_else_a18417:
	LOAD -3(LB), R8
	LOAD #2, R8
	FLOAT R8, R8
	LOAD -2(LB), R0
	LOAD 1(R0), R2
	MUL R2, R8
	BOV over_flow
	SUB R8, R8
	LOAD R8, R1
	BGT OpCmp_if_in_a18916
	LOAD #1, R1
	BRA OpCmp_fin_in_a18916
OpCmp_if_in_a18916:
	LOAD #0, R1
OpCmp_fin_in_a18916:
	LOAD R1, R2
	LOAD R2, R1
	BNE IfThenElse_else_a18916
; appel de methode3
	ADDSP #2
	LOAD -2(LB), R0
	LOAD 5(R0), R8
	STORE R8, 0(SP)
	LOAD -3(LB), R8
	STORE R8, -1(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 3(R8)
	SUBSP #2
	LOAD R0, R8
	STORE R8, 53(LB)
; appel de methode3
	ADDSP #2
	LOAD -2(LB), R8
	STORE R8, 0(SP)
	LOAD 53(LB), R8
	STORE R8, -1(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 3(R8)
	SUBSP #2
	LOAD R0, R8
	LOAD R8, R0
	BRA IfThenElse_fin_a18916
IfThenElse_else_a18916:
	LOAD -3(LB), R2
	LOAD -2(LB), R0
	LOAD 1(R0), R8
	SUB R8, R2
	LOAD R2, R1
	BGT OpCmp_if_in_a19321
	LOAD #1, R1
	BRA OpCmp_fin_in_a19321
OpCmp_if_in_a19321:
	LOAD #0, R1
OpCmp_fin_in_a19321:
	LOAD R1, R8
	LOAD R8, R1
	BNE And_else_in_a19321
	LOAD -3(LB), R8
	LOAD #2, R2
	FLOAT R2, R2
	LOAD -2(LB), R0
	LOAD 1(R0), R2
	MUL R2, R2
	BOV over_flow
	SUB R2, R8
	LOAD R8, R1
	BLT OpCmp_if_in_a19335
	LOAD #1, R1
	BRA OpCmp_fin_in_a19335
OpCmp_if_in_a19335:
	LOAD #0, R1
OpCmp_fin_in_a19335:
	LOAD R1, R8
	LOAD R8, R1
	BNE And_else_in_a19321
	LOAD #0, R1
	BRA And_fin_in_a19321
And_else_in_a19321:
	LOAD #1, R1
And_fin_in_a19321:
	LOAD R1, R8
	LOAD R8, R1
	BNE IfThenElse_else_a19321
; appel de methode3
	ADDSP #2
	LOAD -2(LB), R8
	STORE R8, 0(SP)
	LOAD -3(LB), R2
	LOAD -2(LB), R0
	LOAD 1(R0), R8
	SUB R8, R2
	STORE R2, -1(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 3(R8)
	SUBSP #2
	LOAD R0, R2
	OPP R2, R2
	LOAD R2, R0
	BRA IfThenElse_fin_a19321
IfThenElse_else_a19321:
	LOAD -3(LB), R8
	LOAD -2(LB), R0
	LOAD 1(R0), R8
	LOAD #2, R2
	FLOAT R2, R2
	DIV R2, R8
	BOV divisionErr
	SUB R8, R8
	LOAD R8, R1
	BGT OpCmp_if_in_a19721
	LOAD #1, R1
	BRA OpCmp_fin_in_a19721
OpCmp_if_in_a19721:
	LOAD #0, R1
OpCmp_fin_in_a19721:
	LOAD R1, R2
	LOAD R2, R1
	BNE IfThenElse_else_a19721
; appel de methode2
	ADDSP #2
	LOAD -2(LB), R8
	STORE R8, 0(SP)
	LOAD -2(LB), R0
	LOAD 1(R0), R8
	LOAD #2, R2
	FLOAT R2, R2
	DIV R2, R8
	BOV divisionErr
	LOAD -3(LB), R2
	SUB R2, R8
	STORE R8, -1(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 2(R8)
	SUBSP #2
	LOAD R0, R8
	LOAD R8, R0
	BRA IfThenElse_fin_a19721
IfThenElse_else_a19721:
	LOAD #1, R8
	FLOAT R8, R8
	LOAD #2, R8
	FLOAT R8, R8
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 4(R0), R2
	STORE R2, 0(SP)
; appel de methode2
	ADDSP #2
	LOAD -2(LB), R8
	STORE R8, 0(SP)
	LOAD -3(LB), R8
	LOAD #2, R8
	FLOAT R8, R8
	DIV R8, R8
	BOV divisionErr
	STORE R8, -1(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 2(R8)
	SUBSP #2
	LOAD R0, R8
	STORE R8, -1(SP)
	LOAD #2, R8
	STORE R8, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #3
	LOAD R0, R8
	MUL R8, R8
	BOV over_flow
	SUB R8, R8
	LOAD R8, R0
IfThenElse_fin_a19721:
IfThenElse_fin_a19321:
IfThenElse_fin_a18916:
IfThenElse_fin_a18417:
IfThenElse_fin_a17212:
	POP R2
	POP R4
	POP R8
	POP R10
	RTS
code.Chebychev.getIndexActan:
	PUSH R10
	PUSH R8
	PUSH R4
	PUSH R2
	LOAD #1, R4
	STORE R4, 54(LB)
While_cond_a20915:
	LOAD 54(LB), R10
	LOAD #9, R2
	SUB R2, R10
	LOAD R10, R1
	BLT OpCmp_if_in_a20915
	LOAD #1, R1
	BRA OpCmp_fin_in_a20915
OpCmp_if_in_a20915:
	LOAD #0, R1
OpCmp_fin_in_a20915:
	LOAD R1, R4
	LOAD R4, R1
	BNE While_fin_a20915
	LOAD -3(LB), R8
; appel de methode4
	ADDSP #2
	LOAD -2(LB), R0
	LOAD 2(R0), R2
	STORE R2, 0(SP)
	LOAD 54(LB), R8
	STORE R8, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 4(R2)
	SUBSP #2
	LOAD R0, R8
	SUB R8, R8
	LOAD R8, R1
	BLT OpCmp_if_in_a21016
	LOAD #1, R1
	BRA OpCmp_fin_in_a21016
OpCmp_if_in_a21016:
	LOAD #0, R1
OpCmp_fin_in_a21016:
	LOAD R1, R10
	LOAD R10, R1
	BNE And_else_in_a21016
; appel de methode4
	ADDSP #2
	LOAD -2(LB), R0
	LOAD 2(R0), R8
	STORE R8, 0(SP)
	LOAD 54(LB), R8
	LOAD #1, R2
	SUB R2, R8
	STORE R8, -1(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 4(R8)
	SUBSP #2
	LOAD R0, R8
	LOAD -3(LB), R8
	SUB R8, R8
	LOAD R8, R1
	BLT OpCmp_if_in_a21054
	LOAD #1, R1
	BRA OpCmp_fin_in_a21054
OpCmp_if_in_a21054:
	LOAD #0, R1
OpCmp_fin_in_a21054:
	LOAD R1, R10
	LOAD R10, R1
	BNE And_else_in_a21016
	LOAD #0, R1
	BRA And_fin_in_a21016
And_else_in_a21016:
	LOAD #1, R1
And_fin_in_a21016:
	LOAD R1, R2
	LOAD R2, R1
	BNE IfThenElse_else_a21016
	LOAD 54(LB), R10
	LOAD R10, R0
	BRA IfThenElse_fin_a21016
IfThenElse_else_a21016:
IfThenElse_fin_a21016:
	LOAD 54(LB), R2
	LOAD #1, R10
	ADD R10, R2
	STORE R2, 54(LB)
	BRA While_cond_a20915
While_fin_a20915:
	LOAD 54(LB), R2
	LOAD #9, R10
	SUB R10, R2
	LOAD R2, R1
	BEQ OpCmp_if_in_a21512
	LOAD #1, R1
	BRA OpCmp_fin_in_a21512
OpCmp_if_in_a21512:
	LOAD #0, R1
OpCmp_fin_in_a21512:
	LOAD R1, R4
	LOAD R4, R1
	BNE IfThenElse_else_a21512
	LOAD 54(LB), R10
	LOAD R10, R0
	BRA IfThenElse_fin_a21512
IfThenElse_else_a21512:
IfThenElse_fin_a21512:
	POP R2
	POP R4
	POP R8
	POP R10
	RTS
code.Chebychev.arctanCheb:
	PUSH R10
	PUSH R8
	PUSH R4
	PUSH R2
	LOAD #0x1.936bb8p-4, R4
	STORE R4, 55(LB)
	LOAD #0x1.921fb6p-4, R4
	STORE R4, 56(LB)
	LOAD #0, R4
	STORE R4, 57(LB)
	LOAD #0x0.0p0, R4
	STORE R4, 58(LB)
	LOAD #0x0.0p0, R4
	STORE R4, 59(LB)
	LOAD -3(LB), R10
	LOAD #0, R2
	FLOAT R2, R2
	SUB R2, R10
	LOAD R10, R1
	BLT OpCmp_if_in_a22711
	LOAD #1, R1
	BRA OpCmp_fin_in_a22711
OpCmp_if_in_a22711:
	LOAD #0, R1
OpCmp_fin_in_a22711:
	LOAD R1, R4
	LOAD R4, R1
	BNE IfThenElse_else_a22711
; appel de methode5
	ADDSP #2
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	LOAD -3(LB), R10
	OPP R10, R10
	STORE R10, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 5(R2)
	SUBSP #2
	LOAD R0, R10
	OPP R10, R10
	LOAD R10, R0
	BRA IfThenElse_fin_a22711
IfThenElse_else_a22711:
	LOAD -3(LB), R8
	LOAD #0, R8
	FLOAT R8, R8
	SUB R8, R8
	LOAD R8, R1
	BGE OpCmp_if_in_a23117
	LOAD #1, R1
	BRA OpCmp_fin_in_a23117
OpCmp_if_in_a23117:
	LOAD #0, R1
OpCmp_fin_in_a23117:
	LOAD R1, R2
	LOAD R2, R1
	BNE And_else_in_a23117
	LOAD -3(LB), R8
	LOAD 55(LB), R8
	SUB R8, R8
	LOAD R8, R1
	BLE OpCmp_if_in_a23131
	LOAD #1, R1
	BRA OpCmp_fin_in_a23131
OpCmp_if_in_a23131:
	LOAD #0, R1
OpCmp_fin_in_a23131:
	LOAD R1, R2
	LOAD R2, R1
	BNE And_else_in_a23117
	LOAD #0, R1
	BRA And_fin_in_a23117
And_else_in_a23117:
	LOAD #1, R1
And_fin_in_a23117:
	LOAD R1, R10
	LOAD R10, R1
	BNE IfThenElse_else_a23117
; appel de methode2
	ADDSP #2
	LOAD -2(LB), R0
	LOAD 6(R0), R2
	STORE R2, 0(SP)
	LOAD -3(LB), R8
	STORE R8, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 2(R2)
	SUBSP #2
	LOAD R0, R8
	LOAD R8, R0
	BRA IfThenElse_fin_a23117
IfThenElse_else_a23117:
; appel de methode4
	ADDSP #2
	LOAD -2(LB), R8
	STORE R8, 0(SP)
	LOAD -3(LB), R2
	STORE R2, -1(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 4(R8)
	SUBSP #2
	LOAD R0, R2
	STORE R2, 57(LB)
; appel de methode5
	ADDSP #2
	LOAD -2(LB), R0
	LOAD 2(R0), R2
	STORE R2, 0(SP)
	LOAD 57(LB), R8
	LOAD #1, R8
	SUB R8, R8
	STORE R8, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 5(R2)
	SUBSP #2
	LOAD R0, R8
	STORE R8, 58(LB)
	LOAD #1, R8
	FLOAT R8, R8
	LOAD 58(LB), R2
	DIV R2, R8
	BOV divisionErr
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 4(R0), R2
	STORE R2, 0(SP)
	LOAD 58(LB), R8
	STORE R8, -1(SP)
	LOAD #2, R8
	OPP R8, R8
	STORE R8, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #3
	LOAD R0, R8
	LOAD #1, R2
	FLOAT R2, R2
	ADD R2, R8
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 4(R0), R2
	STORE R2, 0(SP)
	LOAD 58(LB), R2
	STORE R2, -1(SP)
	LOAD #1, R2
	OPP R2, R2
	STORE R2, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #3
	LOAD R0, R2
	LOAD -3(LB), R2
	ADD R2, R2
	DIV R2, R8
	BOV divisionErr
	SUB R8, R8
	STORE R8, 59(LB)
	LOAD #2, R8
	LOAD 57(LB), R8
	MUL R8, R8
	BOV over_flow
	LOAD #2, R8
	SUB R8, R8
	FLOAT R8, R8
	LOAD 56(LB), R8
	MUL R8, R8
	BOV over_flow
; appel de methode5
	ADDSP #2
	LOAD -2(LB), R8
	STORE R8, 0(SP)
	LOAD 59(LB), R2
	STORE R2, -1(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 5(R8)
	SUBSP #2
	LOAD R0, R2
	ADD R2, R8
	LOAD R8, R0
IfThenElse_fin_a23117:
IfThenElse_fin_a22711:
	POP R2
	POP R4
	POP R8
	POP R10
	RTS
code.Chebychev.arcsinCheb:
	PUSH R10
	PUSH R8
	PUSH R4
	PUSH R2
	LOAD #0, R4
	FLOAT R4, R4
	STORE R4, 60(LB)
	LOAD #0, R4
	FLOAT R4, R4
	STORE R4, 61(LB)
	LOAD #0, R4
	FLOAT R4, R4
	STORE R4, 62(LB)
	LOAD #1, R4
	FLOAT R4, R4
	STORE R4, 63(LB)
	LOAD #0, R4
	FLOAT R4, R4
	STORE R4, 64(LB)
	LOAD -3(LB), R4
	STORE R4, 65(LB)
	LOAD #1, R4
	STORE R4, 66(LB)
	LOAD #0, R4
	STORE R4, 67(LB)
While_cond_a25315:
	LOAD 67(LB), R10
	LOAD #250, R8
	SUB R8, R10
	LOAD R10, R1
	BLT OpCmp_if_in_a25315
	LOAD #1, R1
	BRA OpCmp_fin_in_a25315
OpCmp_if_in_a25315:
	LOAD #0, R1
OpCmp_fin_in_a25315:
	LOAD R1, R4
	LOAD R4, R1
	BNE While_fin_a25315
	LOAD 64(LB), R10
	LOAD 65(LB), R2
	SUB R2, R10
	LOAD R10, R1
	BLE OpCmp_if_in_a25416
	LOAD #1, R1
	BRA OpCmp_fin_in_a25416
OpCmp_if_in_a25416:
	LOAD #0, R1
OpCmp_fin_in_a25416:
	LOAD R1, R8
	LOAD R8, R1
	BNE IfThenElse_else_a25416
	LOAD 63(LB), R10
	LOAD #0, R8
	FLOAT R8, R8
	SUB R8, R10
	LOAD R10, R1
	BGE OpCmp_if_in_a25520
	LOAD #1, R1
	BRA OpCmp_fin_in_a25520
OpCmp_if_in_a25520:
	LOAD #0, R1
OpCmp_fin_in_a25520:
	LOAD R1, R2
	LOAD R2, R1
	BNE IfThenElse_else_a25520
	LOAD #1, R8
	STORE R8, 66(LB)
	BRA IfThenElse_fin_a25520
IfThenElse_else_a25520:
	LOAD #1, R8
	OPP R8, R8
	STORE R8, 66(LB)
IfThenElse_fin_a25520:
	BRA IfThenElse_fin_a25416
IfThenElse_else_a25416:
	LOAD 63(LB), R8
	LOAD #0, R10
	FLOAT R10, R10
	SUB R10, R8
	LOAD R8, R1
	BGE OpCmp_if_in_a26320
	LOAD #1, R1
	BRA OpCmp_fin_in_a26320
OpCmp_if_in_a26320:
	LOAD #0, R1
OpCmp_fin_in_a26320:
	LOAD R1, R2
	LOAD R2, R1
	BNE IfThenElse_else_a26320
	LOAD #1, R10
	OPP R10, R10
	STORE R10, 66(LB)
	BRA IfThenElse_fin_a26320
IfThenElse_else_a26320:
	LOAD #1, R10
	STORE R10, 66(LB)
IfThenElse_fin_a26320:
IfThenElse_fin_a25416:
	LOAD 63(LB), R8
	STORE R8, 61(LB)
	LOAD 64(LB), R8
	STORE R8, 62(LB)
	LOAD 61(LB), R8
	LOAD #1, R2
	FLOAT R2, R2
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 4(R0), R10
	STORE R10, 0(SP)
	LOAD #2, R8
	FLOAT R8, R8
	STORE R8, -1(SP)
	LOAD #2, R8
	OPP R8, R8
	LOAD 67(LB), R2
	MUL R2, R8
	BOV over_flow
	STORE R8, -2(SP)
	LOAD 0(SP), R10
	CMP #null, R10
	BEQ pile_pleine
	LOAD 0(R10), R10
	BSR 3(R10)
	SUBSP #3
	LOAD R0, R8
	SUB R8, R2
	MUL R2, R8
	BOV over_flow
	LOAD 62(LB), R2
	LOAD 66(LB), R8
	FLOAT R8, R8
	MUL R8, R2
	BOV over_flow
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 4(R0), R8
	STORE R8, 0(SP)
	LOAD #2, R10
	FLOAT R10, R10
	STORE R10, -1(SP)
	LOAD #1, R10
	LOAD 67(LB), R2
	SUB R2, R10
	STORE R10, -2(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 3(R8)
	SUBSP #3
	LOAD R0, R10
	MUL R10, R2
	BOV over_flow
	SUB R2, R8
	STORE R8, 63(LB)
	LOAD 62(LB), R8
	LOAD #1, R2
	FLOAT R2, R2
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 4(R0), R10
	STORE R10, 0(SP)
	LOAD #2, R8
	FLOAT R8, R8
	STORE R8, -1(SP)
	LOAD #2, R8
	OPP R8, R8
	LOAD 67(LB), R2
	MUL R2, R8
	BOV over_flow
	STORE R8, -2(SP)
	LOAD 0(SP), R10
	CMP #null, R10
	BEQ pile_pleine
	LOAD 0(R10), R10
	BSR 3(R10)
	SUBSP #3
	LOAD R0, R8
	SUB R8, R2
	MUL R2, R8
	BOV over_flow
	LOAD 61(LB), R2
	LOAD 66(LB), R8
	FLOAT R8, R8
	MUL R8, R2
	BOV over_flow
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 4(R0), R8
	STORE R8, 0(SP)
	LOAD #2, R10
	FLOAT R10, R10
	STORE R10, -1(SP)
	LOAD #1, R10
	LOAD 67(LB), R2
	SUB R2, R10
	STORE R10, -2(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 3(R8)
	SUBSP #3
	LOAD R0, R10
	MUL R10, R2
	BOV over_flow
	ADD R2, R8
	STORE R8, 64(LB)
	LOAD 60(LB), R8
	LOAD #2, R2
	LOAD 66(LB), R10
	MUL R10, R2
	BOV over_flow
	FLOAT R2, R2
; appel de methode5
	ADDSP #2
	LOAD -2(LB), R10
	STORE R10, 0(SP)
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 4(R0), R8
	STORE R8, 0(SP)
	LOAD #2, R2
	FLOAT R2, R2
	STORE R2, -1(SP)
	LOAD 67(LB), R2
	OPP R2, R2
	STORE R2, -2(SP)
	LOAD 0(SP), R8
	CMP #null, R8
	BEQ pile_pleine
	LOAD 0(R8), R8
	BSR 3(R8)
	SUBSP #3
	LOAD R0, R2
	STORE R2, -1(SP)
	LOAD 0(SP), R10
	CMP #null, R10
	BEQ pile_pleine
	LOAD 0(R10), R10
	BSR 5(R10)
	SUBSP #2
	LOAD R0, R2
	MUL R2, R2
	BOV over_flow
	ADD R2, R8
	STORE R8, 60(LB)
	LOAD 65(LB), R8
	LOAD 65(LB), R2
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R0
	LOAD 4(R0), R2
	STORE R2, 0(SP)
	LOAD #2, R10
	FLOAT R10, R10
	STORE R10, -1(SP)
	LOAD #2, R10
	OPP R10, R10
	LOAD 67(LB), R8
	MUL R8, R10
	BOV over_flow
	STORE R10, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #3
	LOAD R0, R10
	MUL R10, R2
	BOV over_flow
	ADD R2, R8
	STORE R8, 65(LB)
	LOAD 67(LB), R8
	LOAD #1, R2
	ADD R2, R8
	STORE R8, 67(LB)
	BRA While_cond_a25315
While_fin_a25315:
	LOAD 60(LB), R4
	LOAD R4, R0
	POP R2
	POP R4
	POP R8
	POP R10
	RTS
code.Object.equals:
pile_pleine:
	WSTR "Error: Stack Overflow"
	WNL
	ERROR
over_flow:
	WSTR "Error: Overflow during arithmetic operation"
	WNL
	ERROR
i0_error:
	WSTR "Error: Input/Output error"
	WNL
	ERROR
divisionErr:
	WSTR "Error :Division par 0"
	WNL
	ERROR
