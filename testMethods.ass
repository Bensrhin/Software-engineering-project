	TSTO #11
	BOV pile_pleine
	ADDSP #30
; table des methodes
; construction de la table des methodes de Object
	LOAD #null, R0
	STORE R0, 1(GB)
	LOAD code.Object.equals, R0
	STORE R0, 2(GB)
; construction de la table des methodes de Methods
	LEA 1(GB), R0
	STORE R0, 3(GB)
	LOAD code.Methods.factoriel, R0
	STORE R0, 5(GB)
	LOAD code.Methods.abs, R0
	STORE R0, 7(GB)
	LOAD code.Methods.ulp, R0
	STORE R0, 8(GB)
	LOAD code.Methods.power, R0
	STORE R0, 6(GB)
	LOAD code.Object.equals, R0
	STORE R0, 4(GB)
; construction de la table des methodes de Taylor
	LEA 1(GB), R0
	STORE R0, 9(GB)
	LOAD code.Taylor.taylorCosinus, R0
	STORE R0, 14(GB)
	LOAD code.Taylor.coefTaylorSinus, R0
	STORE R0, 11(GB)
	LOAD code.Taylor.taylorArctan, R0
	STORE R0, 16(GB)
	LOAD code.Taylor.coefTaylorArcsin, R0
	STORE R0, 17(GB)
	LOAD code.Taylor.taylorSinus, R0
	STORE R0, 12(GB)
	LOAD code.Taylor.taylorArcsin, R0
	STORE R0, 18(GB)
	LOAD code.Taylor.coefTaylorCosinus, R0
	STORE R0, 13(GB)
	LOAD code.Taylor.coefTaylorArctan, R0
	STORE R0, 15(GB)
	LOAD code.Object.equals, R0
	STORE R0, 10(GB)
; construction de la table des methodes de RangeReduction
	LEA 1(GB), R0
	STORE R0, 19(GB)
	LOAD code.RangeReduction.FirstReductionCos, R0
	STORE R0, 22(GB)
	LOAD code.RangeReduction.FirstReductionSin, R0
	STORE R0, 21(GB)
	LOAD code.Object.equals, R0
	STORE R0, 20(GB)
; Main program
; Beginning of main instructions:
	LOAD #0x1.921fb8p1, R2
	STORE R2, 23(GB)
; instruction new
	NEW #2, R2
	LEA 9(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.Taylor
	POP R2
	STORE R2, 24(GB)
; instruction new
	NEW #2, R2
	LEA 19(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.RangeReduction
	POP R2
	STORE R2, 25(GB)
; appel de methode3
	ADDSP #2
	LOAD 25(GB), R2
	STORE R2, 0(SP)
	LOAD #100, R3
	FLOAT R3, R3
	LOAD 23(GB), R4
	MUL R4, R3
	BOV over_flow
	STORE R3, -1(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #2
	STORE R0, 26(GB)
; appel de methode2
	ADDSP #2
	LOAD 25(GB), R2
	STORE R2, 0(SP)
	LOAD #100, R3
	FLOAT R3, R3
	LOAD 23(GB), R4
	MUL R4, R3
	BOV over_flow
	STORE R3, -1(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 2(R2)
	SUBSP #2
	STORE R0, 27(GB)
; appel de methode5
	ADDSP #3
	LOAD 24(GB), R2
	STORE R2, 0(SP)
	LOAD #0x0.0p0, R3
	STORE R3, -1(SP)
	LOAD #7, R3
	STORE R3, -2(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 5(R2)
	SUBSP #3
	STORE R0, 28(GB)
; appel de methode3
	ADDSP #3
	LOAD 24(GB), R2
	STORE R2, 0(SP)
	LOAD 23(GB), R3
	LOAD #2, R4
	FLOAT R4, R4
	DIV R4, R3
	BOV divisionErr
	STORE R3, -1(SP)
	LOAD #7, R3
	STORE R3, -2(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #3
	STORE R0, 29(GB)
; appel de methode7
	ADDSP #3
	LOAD 24(GB), R2
	STORE R2, 0(SP)
	LOAD 23(GB), R3
	LOAD #4, R5
	FLOAT R5, R5
	DIV R5, R3
	BOV divisionErr
	STORE R3, -1(SP)
	LOAD #7, R3
	STORE R3, -2(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 7(R2)
	SUBSP #3
	STORE R0, 30(GB)
; appel de methode9
	ADDSP #3
	LOAD 24(GB), R2
	STORE R2, 0(SP)
	LOAD 23(GB), R3
	LOAD #4, R6
	FLOAT R6, R6
	DIV R6, R3
	BOV divisionErr
	STORE R3, -1(SP)
	LOAD #7, R3
	STORE R3, -2(SP)
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 9(R2)
	SUBSP #3
	STORE R0, 31(GB)
	LOAD 28(GB), R1
	WFLOAT
	LOAD 29(GB), R1
	WFLOAT
	LOAD 30(GB), R1
	WFLOAT
	LOAD 31(GB), R1
	WFLOAT
	HALT
init.Methods:
	RTS
code.Methods.factoriel:
	PUSH R2
	PUSH R3
	PUSH R4
	PUSH R5
	PUSH R6
	PUSH R7
	PUSH R8
	PUSH R9
	PUSH R10
	PUSH R11
	PUSH R12
	PUSH R13
	PUSH R14
	PUSH R15
	LOAD -3(LB), R3
	LOAD #0, R7
	SUB R7, R3
	LOAD R3, R1
	BEQ OpCmp_if_in_a412
	LOAD #1, R1
	BRA OpCmp_fin_in_a412
OpCmp_if_in_a412:
	LOAD #0, R1
OpCmp_fin_in_a412:
	LOAD R1, R2
	LOAD R2, R1
	BNE IfThenElse_else_a412
	LOAD #1, R8
	LOAD R8, R0
	BRA IfThenElse_fin_a412
IfThenElse_else_a412:
IfThenElse_fin_a412:
	LOAD -3(LB), R8
; appel de methode2
	ADDSP #2
	LOAD -2(LB), R9
	STORE R9, 0(SP)
	LOAD -3(LB), R10
	LOAD #1, R11
	SUB R11, R10
	STORE R10, -1(SP)
	LOAD 0(SP), R9
	LOAD 0(R9), R9
	BSR 2(R9)
	SUBSP #2
	MUL R0, R8
	BOV over_flow
	LOAD R8, R0
	POP R15
	POP R14
	POP R13
	POP R12
	POP R11
	POP R10
	POP R9
	POP R8
	POP R7
	POP R6
	POP R5
	POP R4
	POP R3
	POP R2
	RTS
code.Methods.power:
	PUSH R2
	PUSH R3
	PUSH R4
	PUSH R5
	PUSH R6
	PUSH R7
	PUSH R8
	PUSH R9
	PUSH R10
	PUSH R11
	PUSH R12
	PUSH R13
	PUSH R14
	PUSH R15
	LOAD #0, R8
	STORE R8, 32(GB)
	LOAD #0x1.0p0, R8
	STORE R8, 33(GB)
	LOAD -4(LB), R9
	LOAD #0, R10
	SUB R10, R9
	LOAD R9, R1
	BLT OpCmp_if_in_a1412
	LOAD #1, R1
	BRA OpCmp_fin_in_a1412
OpCmp_if_in_a1412:
	LOAD #0, R1
OpCmp_fin_in_a1412:
	LOAD R1, R8
	LOAD R8, R1
	BNE IfThenElse_else_a1412
; appel de methode3
	ADDSP #3
	LOAD -2(LB), R11
	STORE R11, 0(SP)
	LOAD #1, R12
	FLOAT R12, R12
	LOAD -3(LB), R13
	DIV R13, R12
	BOV divisionErr
	STORE R12, -1(SP)
	LOAD -4(LB), R12
	OPP R12, R12
	STORE R12, -2(SP)
	LOAD 0(SP), R11
	LOAD 0(R11), R11
	BSR 3(R11)
	SUBSP #3
	LOAD R0, R0
	BRA IfThenElse_fin_a1412
IfThenElse_else_a1412:
While_cond_a1919:
	LOAD -4(LB), R12
	LOAD 32(GB), R14
	SUB R14, R12
	LOAD R12, R1
	BGT OpCmp_if_in_a1919
	LOAD #1, R1
	BRA OpCmp_fin_in_a1919
OpCmp_if_in_a1919:
	LOAD #0, R1
OpCmp_fin_in_a1919:
	LOAD R1, R11
	LOAD R11, R1
	BNE While_fin_a1919
	LOAD 33(GB), R15
	TSTO #1
	BOV pile_pleine
	PUSH R4
	LOAD -3(LB), R4
	MUL R4, R15
	BOV over_flow
	POP R4
	STORE R15, 33(GB)
	LOAD 32(GB), R15
	TSTO #1
	BOV pile_pleine
	PUSH R5
	LOAD #1, R5
	ADD R5, R15
	POP R5
	STORE R15, 32(GB)
	BRA While_cond_a1919
While_fin_a1919:
	LOAD 33(GB), R15
	LOAD R15, R0
IfThenElse_fin_a1412:
	POP R15
	POP R14
	POP R13
	POP R12
	POP R11
	POP R10
	POP R9
	POP R8
	POP R7
	POP R6
	POP R5
	POP R4
	POP R3
	POP R2
	RTS
code.Methods.abs:
	PUSH R2
	PUSH R3
	PUSH R4
	PUSH R5
	PUSH R6
	PUSH R7
	PUSH R8
	PUSH R9
	PUSH R10
	PUSH R11
	PUSH R12
	PUSH R13
	PUSH R14
	PUSH R15
	TSTO #1
	BOV pile_pleine
	PUSH R6
	LOAD -3(LB), R6
	TSTO #1
	BOV pile_pleine
	PUSH R2
	LOAD #0x0.0p0, R2
	SUB R2, R6
	LOAD R6, R1
	BGT OpCmp_if_in_a2812
	LOAD #1, R1
	BRA OpCmp_fin_in_a2812
OpCmp_if_in_a2812:
	LOAD #0, R1
OpCmp_fin_in_a2812:
	LOAD R1, R15
	LOAD R15, R1
	BNE IfThenElse_else_a2812
	TSTO #1
	BOV pile_pleine
	PUSH R3
	LOAD -3(LB), R3
	LOAD R3, R0
	POP R3
	BRA IfThenElse_fin_a2812
IfThenElse_else_a2812:
IfThenElse_fin_a2812:
	TSTO #1
	BOV pile_pleine
	PUSH R7
	LOAD -3(LB), R7
	OPP R7, R7
	LOAD R7, R0
	POP R7
	POP R15
	POP R14
	POP R13
	POP R12
	POP R11
	POP R10
	POP R9
	POP R8
	POP R7
	POP R6
	POP R5
	POP R4
	POP R3
	POP R2
	RTS
code.Methods.ulp:
	PUSH R2
	PUSH R3
	PUSH R4
	PUSH R5
	PUSH R6
	PUSH R7
	PUSH R8
	PUSH R9
	PUSH R10
	PUSH R11
	PUSH R12
	PUSH R13
	PUSH R14
	PUSH R15
	TSTO #1
	BOV pile_pleine
	PUSH R8
	LOAD #126, R8
	OPP R8, R8
	STORE R8, 34(GB)
	POP R8
	TSTO #1
	BOV pile_pleine
	PUSH R9
	LOAD #127, R9
	STORE R9, 35(GB)
	POP R9
	TSTO #1
	BOV pile_pleine
	PUSH R10
	LOAD #0, R10
	STORE R10, 36(GB)
	POP R10
	TSTO #1
	BOV pile_pleine
	PUSH R13
	LOAD #0x0.0p0, R13
	STORE R13, 37(GB)
	POP R13
	TSTO #1
	BOV pile_pleine
	PUSH R11
; appel de methode4
	ADDSP #2
	TSTO #1
	BOV pile_pleine
	PUSH R12
	LOAD -2(LB), R12
	STORE R12, 0(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R14
	LOAD -3(LB), R14
	STORE R14, -1(SP)
	POP R14
	LOAD 0(SP), R12
	LOAD 0(R12), R12
	BSR 4(R12)
	SUBSP #2
	POP R12
; appel de methode3
	ADDSP #3
	TSTO #1
	BOV pile_pleine
	PUSH R4
	LOAD -2(LB), R4
	STORE R4, 0(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R5
	LOAD #0x1.0p1, R5
	STORE R5, -1(SP)
	POP R5
	TSTO #1
	BOV pile_pleine
	PUSH R15
	LOAD 35(GB), R15
	OPP R15, R15
	STORE R15, -2(SP)
	POP R15
	LOAD 0(SP), R4
	LOAD 0(R4), R4
	BSR 3(R4)
	SUBSP #3
	POP R4
	SUB R0, R0
	LOAD R0, R1
	BLE OpCmp_if_in_a3912
	LOAD #1, R1
	BRA OpCmp_fin_in_a3912
OpCmp_if_in_a3912:
	LOAD #0, R1
OpCmp_fin_in_a3912:
	LOAD R1, R11
	LOAD R11, R1
	BNE IfThenElse_else_a3912
	TSTO #1
	BOV pile_pleine
	PUSH R6
	LOAD #0x0.000002p-126, R6
	LOAD R6, R0
	POP R6
	BRA IfThenElse_fin_a3912
IfThenElse_else_a3912:
	TSTO #1
	BOV pile_pleine
	PUSH R2
; appel de methode4
	ADDSP #2
	TSTO #1
	BOV pile_pleine
	PUSH R3
	LOAD -2(LB), R3
	STORE R3, 0(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R7
	LOAD -3(LB), R7
	STORE R7, -1(SP)
	POP R7
	LOAD 0(SP), R3
	LOAD 0(R3), R3
	BSR 4(R3)
	SUBSP #2
	POP R3
; appel de methode3
	ADDSP #3
	TSTO #1
	BOV pile_pleine
	PUSH R8
	LOAD -2(LB), R8
	STORE R8, 0(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R9
	LOAD #0x1.0p1, R9
	STORE R9, -1(SP)
	POP R9
	TSTO #1
	BOV pile_pleine
	PUSH R10
	LOAD 35(GB), R10
	STORE R10, -2(SP)
	POP R10
	LOAD 0(SP), R8
	LOAD 0(R8), R8
	BSR 3(R8)
	SUBSP #3
	POP R8
; appel de methode3
	ADDSP #3
	TSTO #1
	BOV pile_pleine
	PUSH R13
	LOAD -2(LB), R13
	STORE R13, 0(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R11
	LOAD #0x1.0p1, R11
	STORE R11, -1(SP)
	POP R11
	TSTO #1
	BOV pile_pleine
	PUSH R12
	LOAD #104, R12
	STORE R12, -2(SP)
	POP R12
	LOAD 0(SP), R13
	LOAD 0(R13), R13
	BSR 3(R13)
	SUBSP #3
	POP R13
	SUB R0, R0
	SUB R0, R0
	LOAD R0, R1
	BGT OpCmp_if_in_a4317
	LOAD #1, R1
	BRA OpCmp_fin_in_a4317
OpCmp_if_in_a4317:
	LOAD #0, R1
OpCmp_fin_in_a4317:
	LOAD R1, R2
	LOAD R2, R1
	BNE IfThenElse_else_a4317
; appel de methode4
	ADDSP #2
	TSTO #1
	BOV pile_pleine
	PUSH R14
	LOAD -2(LB), R14
	STORE R14, 0(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R4
	LOAD -3(LB), R4
	STORE R4, -1(SP)
	POP R4
	LOAD 0(SP), R14
	LOAD 0(R14), R14
	BSR 4(R14)
	SUBSP #2
	POP R14
	LOAD R0, R0
	BRA IfThenElse_fin_a4317
IfThenElse_else_a4317:
While_cond_a4818:
	TSTO #1
	BOV pile_pleine
	PUSH R5
	TSTO #1
	BOV pile_pleine
	PUSH R15
	LOAD 35(GB), R15
	TSTO #1
	BOV pile_pleine
	PUSH R6
	LOAD 34(GB), R6
	SUB R6, R15
	POP R6
	TSTO #1
	BOV pile_pleine
	PUSH R2
	LOAD #1, R2
	SUB R2, R15
	LOAD R15, R1
	BGT OpCmp_if_in_a4818
	LOAD #1, R1
	BRA OpCmp_fin_in_a4818
OpCmp_if_in_a4818:
	LOAD #0, R1
OpCmp_fin_in_a4818:
	LOAD R1, R5
	LOAD R5, R1
	BNE While_fin_a4818
	TSTO #1
	BOV pile_pleine
	PUSH R3
	LOAD 35(GB), R3
	TSTO #1
	BOV pile_pleine
	PUSH R7
	LOAD 34(GB), R7
	ADD R7, R3
	POP R7
	TSTO #1
	BOV pile_pleine
	PUSH R8
	LOAD #2, R8
	QUO R8, R3
	BOV divisionErr
	STORE R3, 36(GB)
	POP R3
; appel de methode3
	ADDSP #3
	TSTO #1
	BOV pile_pleine
	PUSH R9
	LOAD -2(LB), R9
	STORE R9, 0(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R10
	LOAD #0x1.0p1, R10
	STORE R10, -1(SP)
	POP R10
	TSTO #1
	BOV pile_pleine
	PUSH R13
	LOAD 36(GB), R13
	STORE R13, -2(SP)
	POP R13
	LOAD 0(SP), R9
	LOAD 0(R9), R9
	BSR 3(R9)
	SUBSP #3
	POP R9
	STORE R0, 37(GB)
	TSTO #1
	BOV pile_pleine
	PUSH R11
; appel de methode4
	ADDSP #2
	TSTO #1
	BOV pile_pleine
	PUSH R12
	LOAD -2(LB), R12
	STORE R12, 0(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R14
	LOAD -3(LB), R14
	STORE R14, -1(SP)
	POP R14
	LOAD 0(SP), R12
	LOAD 0(R12), R12
	BSR 4(R12)
	SUBSP #2
	POP R12
	TSTO #1
	BOV pile_pleine
	PUSH R4
	LOAD 37(GB), R4
	SUB R4, R0
	LOAD R0, R1
	BGT OpCmp_if_in_a5120
	LOAD #1, R1
	BRA OpCmp_fin_in_a5120
OpCmp_if_in_a5120:
	LOAD #0, R1
OpCmp_fin_in_a5120:
	LOAD R1, R11
	LOAD R11, R1
	BNE IfThenElse_else_a5120
	TSTO #1
	BOV pile_pleine
	PUSH R5
	LOAD 36(GB), R5
	STORE R5, 34(GB)
	POP R5
	BRA IfThenElse_fin_a5120
IfThenElse_else_a5120:
	TSTO #1
	BOV pile_pleine
	PUSH R15
	LOAD 36(GB), R15
	STORE R15, 35(GB)
	POP R15
IfThenElse_fin_a5120:
	BRA While_cond_a4818
While_fin_a4818:
	TSTO #1
	BOV pile_pleine
	PUSH R6
; appel de methode4
	ADDSP #2
	TSTO #1
	BOV pile_pleine
	PUSH R2
	LOAD -2(LB), R2
	STORE R2, 0(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R3
	LOAD -3(LB), R3
	STORE R3, -1(SP)
	POP R3
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 4(R2)
	SUBSP #2
	POP R2
; appel de methode3
	ADDSP #3
	TSTO #1
	BOV pile_pleine
	PUSH R7
	LOAD -2(LB), R7
	STORE R7, 0(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R8
	LOAD #0x1.0p1, R8
	STORE R8, -1(SP)
	POP R8
	TSTO #1
	BOV pile_pleine
	PUSH R9
	LOAD 35(GB), R9
	STORE R9, -2(SP)
	POP R9
	LOAD 0(SP), R7
	LOAD 0(R7), R7
	BSR 3(R7)
	SUBSP #3
	POP R7
	SUB R0, R0
	LOAD R0, R1
	BEQ OpCmp_if_in_a5916
	LOAD #1, R1
	BRA OpCmp_fin_in_a5916
OpCmp_if_in_a5916:
	LOAD #0, R1
OpCmp_fin_in_a5916:
	LOAD R1, R6
	LOAD R6, R1
	BNE IfThenElse_else_a5916
; appel de methode3
	ADDSP #3
	TSTO #1
	BOV pile_pleine
	PUSH R10
	LOAD -2(LB), R10
	STORE R10, 0(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R13
	LOAD #0x1.0p1, R13
	STORE R13, -1(SP)
	POP R13
	TSTO #1
	BOV pile_pleine
	PUSH R11
	LOAD 35(GB), R11
	TSTO #1
	BOV pile_pleine
	PUSH R12
	LOAD #23, R12
	SUB R12, R11
	POP R12
	STORE R11, -2(SP)
	POP R11
	LOAD 0(SP), R10
	LOAD 0(R10), R10
	BSR 3(R10)
	SUBSP #3
	POP R10
	LOAD R0, R0
	BRA IfThenElse_fin_a5916
IfThenElse_else_a5916:
; appel de methode3
	ADDSP #3
	TSTO #1
	BOV pile_pleine
	PUSH R14
	LOAD -2(LB), R14
	STORE R14, 0(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R4
	LOAD #0x1.0p1, R4
	STORE R4, -1(SP)
	POP R4
	TSTO #1
	BOV pile_pleine
	PUSH R5
	LOAD 35(GB), R5
	TSTO #1
	BOV pile_pleine
	PUSH R15
	LOAD #24, R15
	SUB R15, R5
	POP R15
	STORE R5, -2(SP)
	POP R5
	LOAD 0(SP), R14
	LOAD 0(R14), R14
	BSR 3(R14)
	SUBSP #3
	POP R14
	LOAD R0, R0
IfThenElse_fin_a5916:
IfThenElse_fin_a4317:
IfThenElse_fin_a3912:
	POP R15
	POP R14
	POP R13
	POP R12
	POP R11
	POP R10
	POP R9
	POP R8
	POP R7
	POP R6
	POP R5
	POP R4
	POP R3
	POP R2
	RTS
init.Taylor:
; instruction new
	TSTO #1
	BOV pile_pleine
	PUSH R6
	NEW #1, R6
	LEA 3(GB), R0
	STORE R0, 0(R6)
	PUSH R6
	BSR init.Methods
	POP R6
	LOAD R6, R0
	POP R6
	LOAD -2(LB), R1
	STORE R0, 1(R1)
	RTS
code.Taylor.coefTaylorSinus:
	PUSH R2
	PUSH R3
	PUSH R4
	PUSH R5
	PUSH R6
	PUSH R7
	PUSH R8
	PUSH R9
	PUSH R10
	PUSH R11
	PUSH R12
	PUSH R13
	PUSH R14
	PUSH R15
; appel de methode3
	ADDSP #3
	TSTO #1
	BOV pile_pleine
	PUSH R2
	LOAD -2(LB), R1
	LOAD 1(R1), R2
	STORE R2, 0(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R3
	LOAD #0x1.0p0, R3
	OPP R3, R3
	STORE R3, -1(SP)
	POP R3
	TSTO #1
	BOV pile_pleine
	PUSH R7
	LOAD -3(LB), R7
	STORE R7, -2(SP)
	POP R7
	LOAD 0(SP), R2
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #3
	POP R2
; appel de methode3
	ADDSP #3
	TSTO #1
	BOV pile_pleine
	PUSH R8
	LOAD -2(LB), R1
	LOAD 1(R1), R8
	STORE R8, 0(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R9
	LOAD -4(LB), R9
	STORE R9, -1(SP)
	POP R9
	TSTO #1
	BOV pile_pleine
	PUSH R10
	LOAD #2, R10
	TSTO #1
	BOV pile_pleine
	PUSH R13
	LOAD -3(LB), R13
	MUL R13, R10
	BOV over_flow
	POP R13
	TSTO #1
	BOV pile_pleine
	PUSH R11
	LOAD #1, R11
; appel de methode2
	ADDSP #2
	TSTO #1
	BOV pile_pleine
	PUSH R12
	LOAD -2(LB), R1
	LOAD 1(R1), R12
	STORE R12, 0(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R14
	LOAD #2, R14
	TSTO #1
	BOV pile_pleine
	PUSH R4
	LOAD -3(LB), R4
	MUL R4, R14
	BOV over_flow
	POP R4
	TSTO #1
	BOV pile_pleine
	PUSH R5
	LOAD #1, R5
	ADD R5, R14
	POP R5
	STORE R14, -1(SP)
	POP R14
	LOAD 0(SP), R12
	LOAD 0(R12), R12
	BSR 2(R12)
	SUBSP #2
	POP R12
	QUO R0, R11
	BOV divisionErr
	ADD R11, R10
	POP R11
	STORE R10, -2(SP)
	POP R10
	LOAD 0(SP), R8
	LOAD 0(R8), R8
	BSR 3(R8)
	SUBSP #3
	POP R8
	MUL R0, R0
	BOV over_flow
	LOAD R0, R0
	POP R15
	POP R14
	POP R13
	POP R12
	POP R11
	POP R10
	POP R9
	POP R8
	POP R7
	POP R6
	POP R5
	POP R4
	POP R3
	POP R2
	RTS
code.Taylor.taylorSinus:
	PUSH R2
	PUSH R3
	PUSH R4
	PUSH R5
	PUSH R6
	PUSH R7
	PUSH R8
	PUSH R9
	PUSH R10
	PUSH R11
	PUSH R12
	PUSH R13
	PUSH R14
	PUSH R15
	TSTO #1
	BOV pile_pleine
	PUSH R15
	LOAD #0, R15
	FLOAT R15, R15
	STORE R15, 38(GB)
	POP R15
	TSTO #1
	BOV pile_pleine
	PUSH R6
	LOAD #0, R6
	STORE R6, 39(GB)
	POP R6
While_cond_a1515:
	TSTO #1
	BOV pile_pleine
	PUSH R2
	TSTO #1
	BOV pile_pleine
	PUSH R3
	LOAD 39(GB), R3
	TSTO #1
	BOV pile_pleine
	PUSH R7
	LOAD -4(LB), R7
	SUB R7, R3
	LOAD R3, R1
	BLT OpCmp_if_in_a1515
	LOAD #1, R1
	BRA OpCmp_fin_in_a1515
OpCmp_if_in_a1515:
	LOAD #0, R1
OpCmp_fin_in_a1515:
	LOAD R1, R2
	LOAD R2, R1
	BNE While_fin_a1515
	TSTO #1
	BOV pile_pleine
	PUSH R8
	LOAD 38(GB), R8
; appel de methode2
	ADDSP #3
	TSTO #1
	BOV pile_pleine
	PUSH R9
	LOAD -2(LB), R9
	STORE R9, 0(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R10
	LOAD 39(GB), R10
	STORE R10, -1(SP)
	POP R10
	TSTO #1
	BOV pile_pleine
	PUSH R13
	LOAD -3(LB), R13
	STORE R13, -2(SP)
	POP R13
	LOAD 0(SP), R9
	LOAD 0(R9), R9
	BSR 2(R9)
	SUBSP #3
	POP R9
	ADD R0, R8
	STORE R8, 38(GB)
	POP R8
	TSTO #1
	BOV pile_pleine
	PUSH R11
	LOAD 39(GB), R11
	TSTO #1
	BOV pile_pleine
	PUSH R12
	LOAD #1, R12
	ADD R12, R11
	POP R12
	STORE R11, 39(GB)
	POP R11
	BRA While_cond_a1515
While_fin_a1515:
	TSTO #1
	BOV pile_pleine
	PUSH R14
	LOAD 38(GB), R14
	LOAD R14, R0
	POP R14
	POP R15
	POP R14
	POP R13
	POP R12
	POP R11
	POP R10
	POP R9
	POP R8
	POP R7
	POP R6
	POP R5
	POP R4
	POP R3
	POP R2
	RTS
code.Taylor.coefTaylorCosinus:
	PUSH R2
	PUSH R3
	PUSH R4
	PUSH R5
	PUSH R6
	PUSH R7
	PUSH R8
	PUSH R9
	PUSH R10
	PUSH R11
	PUSH R12
	PUSH R13
	PUSH R14
	PUSH R15
; appel de methode3
	ADDSP #3
	TSTO #1
	BOV pile_pleine
	PUSH R4
	LOAD -2(LB), R1
	LOAD 1(R1), R4
	STORE R4, 0(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R5
	LOAD #0x1.0p0, R5
	OPP R5, R5
	STORE R5, -1(SP)
	POP R5
	TSTO #1
	BOV pile_pleine
	PUSH R15
	LOAD -3(LB), R15
	STORE R15, -2(SP)
	POP R15
	LOAD 0(SP), R4
	LOAD 0(R4), R4
	BSR 3(R4)
	SUBSP #3
	POP R4
; appel de methode3
	ADDSP #3
	TSTO #1
	BOV pile_pleine
	PUSH R6
	LOAD -2(LB), R1
	LOAD 1(R1), R6
	STORE R6, 0(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R2
	LOAD -4(LB), R2
	STORE R2, -1(SP)
	POP R2
	TSTO #1
	BOV pile_pleine
	PUSH R3
	LOAD #2, R3
	TSTO #1
	BOV pile_pleine
	PUSH R7
	LOAD -3(LB), R7
	MUL R7, R3
	BOV over_flow
	POP R7
; appel de methode2
	ADDSP #2
	TSTO #1
	BOV pile_pleine
	PUSH R8
	LOAD -2(LB), R1
	LOAD 1(R1), R8
	STORE R8, 0(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R9
	LOAD #2, R9
	TSTO #1
	BOV pile_pleine
	PUSH R10
	LOAD -3(LB), R10
	MUL R10, R9
	BOV over_flow
	POP R10
	STORE R9, -1(SP)
	POP R9
	LOAD 0(SP), R8
	LOAD 0(R8), R8
	BSR 2(R8)
	SUBSP #2
	POP R8
	QUO R0, R3
	BOV divisionErr
	STORE R3, -2(SP)
	POP R3
	LOAD 0(SP), R6
	LOAD 0(R6), R6
	BSR 3(R6)
	SUBSP #3
	POP R6
	MUL R0, R0
	BOV over_flow
	LOAD R0, R0
	POP R15
	POP R14
	POP R13
	POP R12
	POP R11
	POP R10
	POP R9
	POP R8
	POP R7
	POP R6
	POP R5
	POP R4
	POP R3
	POP R2
	RTS
code.Taylor.taylorCosinus:
	PUSH R2
	PUSH R3
	PUSH R4
	PUSH R5
	PUSH R6
	PUSH R7
	PUSH R8
	PUSH R9
	PUSH R10
	PUSH R11
	PUSH R12
	PUSH R13
	PUSH R14
	PUSH R15
	TSTO #1
	BOV pile_pleine
	PUSH R13
	LOAD #0, R13
	FLOAT R13, R13
	STORE R13, 40(GB)
	POP R13
	TSTO #1
	BOV pile_pleine
	PUSH R11
	LOAD #0, R11
	STORE R11, 41(GB)
	POP R11
While_cond_a2915:
	TSTO #1
	BOV pile_pleine
	PUSH R12
	TSTO #1
	BOV pile_pleine
	PUSH R14
	LOAD 41(GB), R14
	TSTO #1
	BOV pile_pleine
	PUSH R4
	LOAD -4(LB), R4
	SUB R4, R14
	LOAD R14, R1
	BLT OpCmp_if_in_a2915
	LOAD #1, R1
	BRA OpCmp_fin_in_a2915
OpCmp_if_in_a2915:
	LOAD #0, R1
OpCmp_fin_in_a2915:
	LOAD R1, R12
	LOAD R12, R1
	BNE While_fin_a2915
	TSTO #1
	BOV pile_pleine
	PUSH R5
	LOAD 40(GB), R5
; appel de methode4
	ADDSP #3
	TSTO #1
	BOV pile_pleine
	PUSH R15
	LOAD -2(LB), R15
	STORE R15, 0(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R6
	LOAD 41(GB), R6
	STORE R6, -1(SP)
	POP R6
	TSTO #1
	BOV pile_pleine
	PUSH R2
	LOAD -3(LB), R2
	STORE R2, -2(SP)
	POP R2
	LOAD 0(SP), R15
	LOAD 0(R15), R15
	BSR 4(R15)
	SUBSP #3
	POP R15
	ADD R0, R5
	STORE R5, 40(GB)
	POP R5
	TSTO #1
	BOV pile_pleine
	PUSH R3
	LOAD 41(GB), R3
	TSTO #1
	BOV pile_pleine
	PUSH R7
	LOAD #1, R7
	ADD R7, R3
	POP R7
	STORE R3, 41(GB)
	POP R3
	BRA While_cond_a2915
While_fin_a2915:
	TSTO #1
	BOV pile_pleine
	PUSH R8
	LOAD 40(GB), R8
	LOAD R8, R0
	POP R8
	POP R15
	POP R14
	POP R13
	POP R12
	POP R11
	POP R10
	POP R9
	POP R8
	POP R7
	POP R6
	POP R5
	POP R4
	POP R3
	POP R2
	RTS
code.Taylor.coefTaylorArctan:
	PUSH R2
	PUSH R3
	PUSH R4
	PUSH R5
	PUSH R6
	PUSH R7
	PUSH R8
	PUSH R9
	PUSH R10
	PUSH R11
	PUSH R12
	PUSH R13
	PUSH R14
	PUSH R15
; appel de methode3
	ADDSP #3
	TSTO #1
	BOV pile_pleine
	PUSH R9
	LOAD -2(LB), R1
	LOAD 1(R1), R9
	STORE R9, 0(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R10
	LOAD #0x1.0p0, R10
	OPP R10, R10
	STORE R10, -1(SP)
	POP R10
	TSTO #1
	BOV pile_pleine
	PUSH R13
	LOAD -3(LB), R13
	STORE R13, -2(SP)
	POP R13
	LOAD 0(SP), R9
	LOAD 0(R9), R9
	BSR 3(R9)
	SUBSP #3
	POP R9
; appel de methode3
	ADDSP #3
	TSTO #1
	BOV pile_pleine
	PUSH R11
	LOAD -2(LB), R1
	LOAD 1(R1), R11
	STORE R11, 0(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R12
	LOAD -4(LB), R12
	STORE R12, -1(SP)
	POP R12
	TSTO #1
	BOV pile_pleine
	PUSH R14
	LOAD #2, R14
	TSTO #1
	BOV pile_pleine
	PUSH R4
	LOAD -3(LB), R4
	MUL R4, R14
	BOV over_flow
	POP R4
	TSTO #1
	BOV pile_pleine
	PUSH R5
	LOAD #1, R5
	ADD R5, R14
	POP R5
	TSTO #1
	BOV pile_pleine
	PUSH R15
	LOAD #2, R15
	TSTO #1
	BOV pile_pleine
	PUSH R6
	LOAD -3(LB), R6
	MUL R6, R15
	BOV over_flow
	POP R6
	TSTO #1
	BOV pile_pleine
	PUSH R2
	LOAD #1, R2
	ADD R2, R15
	POP R2
	QUO R15, R14
	BOV divisionErr
	STORE R14, -2(SP)
	POP R14
	LOAD 0(SP), R11
	LOAD 0(R11), R11
	BSR 3(R11)
	SUBSP #3
	POP R11
	MUL R0, R0
	BOV over_flow
	LOAD R0, R0
	POP R15
	POP R14
	POP R13
	POP R12
	POP R11
	POP R10
	POP R9
	POP R8
	POP R7
	POP R6
	POP R5
	POP R4
	POP R3
	POP R2
	RTS
code.Taylor.taylorArctan:
	PUSH R2
	PUSH R3
	PUSH R4
	PUSH R5
	PUSH R6
	PUSH R7
	PUSH R8
	PUSH R9
	PUSH R10
	PUSH R11
	PUSH R12
	PUSH R13
	PUSH R14
	PUSH R15
	TSTO #1
	BOV pile_pleine
	PUSH R3
	LOAD #0, R3
	FLOAT R3, R3
	STORE R3, 42(GB)
	POP R3
	TSTO #1
	BOV pile_pleine
	PUSH R7
	LOAD #0, R7
	STORE R7, 43(GB)
	POP R7
While_cond_a4315:
	TSTO #1
	BOV pile_pleine
	PUSH R8
	TSTO #1
	BOV pile_pleine
	PUSH R9
	LOAD 43(GB), R9
	TSTO #1
	BOV pile_pleine
	PUSH R10
	LOAD -4(LB), R10
	SUB R10, R9
	LOAD R9, R1
	BLT OpCmp_if_in_a4315
	LOAD #1, R1
	BRA OpCmp_fin_in_a4315
OpCmp_if_in_a4315:
	LOAD #0, R1
OpCmp_fin_in_a4315:
	LOAD R1, R8
	LOAD R8, R1
	BNE While_fin_a4315
	TSTO #1
	BOV pile_pleine
	PUSH R13
	LOAD 42(GB), R13
; appel de methode6
	ADDSP #3
	TSTO #1
	BOV pile_pleine
	PUSH R11
	LOAD -2(LB), R11
	STORE R11, 0(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R12
	LOAD 43(GB), R12
	STORE R12, -1(SP)
	POP R12
	TSTO #1
	BOV pile_pleine
	PUSH R14
	LOAD -3(LB), R14
	STORE R14, -2(SP)
	POP R14
	LOAD 0(SP), R11
	LOAD 0(R11), R11
	BSR 6(R11)
	SUBSP #3
	POP R11
	ADD R0, R13
	STORE R13, 42(GB)
	POP R13
	TSTO #1
	BOV pile_pleine
	PUSH R4
	LOAD 43(GB), R4
	TSTO #1
	BOV pile_pleine
	PUSH R5
	LOAD #1, R5
	ADD R5, R4
	POP R5
	STORE R4, 43(GB)
	POP R4
	BRA While_cond_a4315
While_fin_a4315:
	TSTO #1
	BOV pile_pleine
	PUSH R15
	LOAD 42(GB), R15
	LOAD R15, R0
	POP R15
	POP R15
	POP R14
	POP R13
	POP R12
	POP R11
	POP R10
	POP R9
	POP R8
	POP R7
	POP R6
	POP R5
	POP R4
	POP R3
	POP R2
	RTS
code.Taylor.coefTaylorArcsin:
	PUSH R2
	PUSH R3
	PUSH R4
	PUSH R5
	PUSH R6
	PUSH R7
	PUSH R8
	PUSH R9
	PUSH R10
	PUSH R11
	PUSH R12
	PUSH R13
	PUSH R14
	PUSH R15
; appel de methode3
	ADDSP #3
	TSTO #1
	BOV pile_pleine
	PUSH R6
	LOAD -2(LB), R1
	LOAD 1(R1), R6
	STORE R6, 0(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R2
	LOAD #0x1.0p0, R2
	OPP R2, R2
	STORE R2, -1(SP)
	POP R2
	TSTO #1
	BOV pile_pleine
	PUSH R3
	LOAD -3(LB), R3
	STORE R3, -2(SP)
	POP R3
	LOAD 0(SP), R6
	LOAD 0(R6), R6
	BSR 3(R6)
	SUBSP #3
	POP R6
; appel de methode3
	ADDSP #3
	TSTO #1
	BOV pile_pleine
	PUSH R7
	LOAD -2(LB), R1
	LOAD 1(R1), R7
	STORE R7, 0(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R8
	LOAD -4(LB), R8
	STORE R8, -1(SP)
	POP R8
	TSTO #1
	BOV pile_pleine
	PUSH R9
	LOAD #2, R9
	TSTO #1
	BOV pile_pleine
	PUSH R10
	LOAD -3(LB), R10
	MUL R10, R9
	BOV over_flow
	POP R10
	TSTO #1
	BOV pile_pleine
	PUSH R13
	LOAD #1, R13
	ADD R13, R9
	POP R13
	STORE R9, -2(SP)
	POP R9
	LOAD 0(SP), R7
	LOAD 0(R7), R7
	BSR 3(R7)
	SUBSP #3
	POP R7
	MUL R0, R0
	BOV over_flow
; appel de methode2
	ADDSP #2
	TSTO #1
	BOV pile_pleine
	PUSH R11
	LOAD -2(LB), R1
	LOAD 1(R1), R11
	STORE R11, 0(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R12
	LOAD #2, R12
	TSTO #1
	BOV pile_pleine
	PUSH R14
	LOAD -3(LB), R14
	MUL R14, R12
	BOV over_flow
	POP R14
	STORE R12, -1(SP)
	POP R12
	LOAD 0(SP), R11
	LOAD 0(R11), R11
	BSR 2(R11)
	SUBSP #2
	POP R11
	FLOAT R0, R0
	MUL R0, R0
	BOV over_flow
	TSTO #1
	BOV pile_pleine
	PUSH R4
	LOAD #2, R4
	TSTO #1
	BOV pile_pleine
	PUSH R5
	LOAD -3(LB), R5
	MUL R5, R4
	BOV over_flow
	POP R5
	TSTO #1
	BOV pile_pleine
	PUSH R15
	LOAD #1, R15
	ADD R15, R4
	POP R15
	FLOAT R4, R4
; appel de methode3
	ADDSP #3
	TSTO #1
	BOV pile_pleine
	PUSH R6
	LOAD -2(LB), R1
	LOAD 1(R1), R6
	STORE R6, 0(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R2
	LOAD #0x1.0p1, R2
	STORE R2, -1(SP)
	POP R2
	TSTO #1
	BOV pile_pleine
	PUSH R3
	LOAD #2, R3
	TSTO #1
	BOV pile_pleine
	PUSH R7
	LOAD -3(LB), R7
	MUL R7, R3
	BOV over_flow
	POP R7
	STORE R3, -2(SP)
	POP R3
	LOAD 0(SP), R6
	LOAD 0(R6), R6
	BSR 3(R6)
	SUBSP #3
	POP R6
	MUL R0, R4
	BOV over_flow
; appel de methode3
	ADDSP #3
	TSTO #1
	BOV pile_pleine
	PUSH R8
	LOAD -2(LB), R1
	LOAD 1(R1), R8
	STORE R8, 0(SP)
; appel de methode2
	ADDSP #2
	TSTO #1
	BOV pile_pleine
	PUSH R9
	LOAD -2(LB), R1
	LOAD 1(R1), R9
	STORE R9, 0(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R10
	LOAD -3(LB), R10
	STORE R10, -1(SP)
	POP R10
	LOAD 0(SP), R9
	LOAD 0(R9), R9
	BSR 2(R9)
	SUBSP #2
	POP R9
	FLOAT R0, R0
	STORE R0, -1(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R13
	LOAD #2, R13
	STORE R13, -2(SP)
	POP R13
	LOAD 0(SP), R8
	LOAD 0(R8), R8
	BSR 3(R8)
	SUBSP #3
	POP R8
	MUL R0, R4
	BOV over_flow
	DIV R4, R0
	BOV divisionErr
	LOAD R0, R0
	POP R15
	POP R14
	POP R13
	POP R12
	POP R11
	POP R10
	POP R9
	POP R8
	POP R7
	POP R6
	POP R5
	POP R4
	POP R3
	POP R2
	RTS
code.Taylor.taylorArcsin:
	PUSH R2
	PUSH R3
	PUSH R4
	PUSH R5
	PUSH R6
	PUSH R7
	PUSH R8
	PUSH R9
	PUSH R10
	PUSH R11
	PUSH R12
	PUSH R13
	PUSH R14
	PUSH R15
	TSTO #1
	BOV pile_pleine
	PUSH R11
	LOAD #0, R11
	FLOAT R11, R11
	STORE R11, 44(GB)
	POP R11
	TSTO #1
	BOV pile_pleine
	PUSH R12
	LOAD #0, R12
	STORE R12, 45(GB)
	POP R12
While_cond_a5815:
	TSTO #1
	BOV pile_pleine
	PUSH R14
	TSTO #1
	BOV pile_pleine
	PUSH R4
	LOAD 45(GB), R4
	TSTO #1
	BOV pile_pleine
	PUSH R5
	LOAD -4(LB), R5
	SUB R5, R4
	LOAD R4, R1
	BLT OpCmp_if_in_a5815
	LOAD #1, R1
	BRA OpCmp_fin_in_a5815
OpCmp_if_in_a5815:
	LOAD #0, R1
OpCmp_fin_in_a5815:
	LOAD R1, R14
	LOAD R14, R1
	BNE While_fin_a5815
	TSTO #1
	BOV pile_pleine
	PUSH R15
	LOAD 44(GB), R15
; appel de methode8
	ADDSP #3
	TSTO #1
	BOV pile_pleine
	PUSH R6
	LOAD -2(LB), R6
	STORE R6, 0(SP)
	TSTO #1
	BOV pile_pleine
	PUSH R2
	LOAD 45(GB), R2
	STORE R2, -1(SP)
	POP R2
	TSTO #1
	BOV pile_pleine
	PUSH R3
	LOAD -3(LB), R3
	STORE R3, -2(SP)
	POP R3
	LOAD 0(SP), R6
	LOAD 0(R6), R6
	BSR 8(R6)
	SUBSP #3
	POP R6
	ADD R0, R15
	STORE R15, 44(GB)
	POP R15
	TSTO #1
	BOV pile_pleine
	PUSH R7
	LOAD 45(GB), R7
	TSTO #1
	BOV pile_pleine
	PUSH R8
	LOAD #1, R8
	ADD R8, R7
	POP R8
	STORE R7, 45(GB)
	POP R7
	BRA While_cond_a5815
While_fin_a5815:
	TSTO #1
	BOV pile_pleine
	PUSH R9
	LOAD 44(GB), R9
	LOAD R9, R0
	POP R9
	POP R15
	POP R14
	POP R13
	POP R12
	POP R11
	POP R10
	POP R9
	POP R8
	POP R7
	POP R6
	POP R5
	POP R4
	POP R3
	POP R2
	RTS
init.RangeReduction:
	TSTO #1
	BOV pile_pleine
	PUSH R10
	LOAD #0x1.921fb4p1, R10
	LOAD R10, R0
	POP R10
	LOAD -2(LB), R1
	STORE R0, 1(R1)
	RTS
code.RangeReduction.FirstReductionSin:
	PUSH R2
	PUSH R3
	PUSH R4
	PUSH R5
	PUSH R6
	PUSH R7
	PUSH R8
	PUSH R9
	PUSH R10
	PUSH R11
	PUSH R12
	PUSH R13
	PUSH R14
	PUSH R15
	TSTO #1
	BOV pile_pleine
	PUSH R13
	LOAD #0x1.92p1, R13
	STORE R13, 46(GB)
	POP R13
	TSTO #1
	BOV pile_pleine
	PUSH R11
	LOAD #0x1.fb5444p-11, R11
	STORE R11, 47(GB)
	POP R11
	TSTO #1
	BOV pile_pleine
	PUSH R12
	LOAD -3(LB), R12
	TSTO #1
	BOV pile_pleine
	PUSH R14
	LOAD -2(LB), R1
	LOAD 1(R1), R14
	DIV R14, R12
	BOV divisionErr
	INT R12, R12
	STORE R12, 48(GB)
	POP R12
	TSTO #1
	BOV pile_pleine
	PUSH R4
	LOAD -3(LB), R4
	TSTO #1
	BOV pile_pleine
	PUSH R5
	LOAD 48(GB), R5
	FLOAT R5, R5
	TSTO #1
	BOV pile_pleine
	PUSH R15
	LOAD 46(GB), R15
	MUL R15, R5
	BOV over_flow
	POP R15
	SUB R5, R4
	POP R5
	STORE R4, 49(GB)
	POP R4
	TSTO #1
	BOV pile_pleine
	PUSH R6
	LOAD 49(GB), R6
	TSTO #1
	BOV pile_pleine
	PUSH R2
	LOAD 48(GB), R2
	FLOAT R2, R2
	TSTO #1
	BOV pile_pleine
	PUSH R3
	LOAD 47(GB), R3
	MUL R3, R2
	BOV over_flow
	POP R3
	SUB R2, R6
	POP R2
	STORE R6, 49(GB)
	POP R6
	TSTO #1
	BOV pile_pleine
	PUSH R7
	TSTO #1
	BOV pile_pleine
	PUSH R8
	LOAD 48(GB), R8
	TSTO #1
	BOV pile_pleine
	PUSH R9
	LOAD #2, R9
	REM R9, R8
	BOV divisionErr
	POP R9
	TSTO #1
	BOV pile_pleine
	PUSH R10
	LOAD #0, R10
	SUB R10, R8
	LOAD R8, R1
	BEQ OpCmp_if_in_a1212
	LOAD #1, R1
	BRA OpCmp_fin_in_a1212
OpCmp_if_in_a1212:
	LOAD #0, R1
OpCmp_fin_in_a1212:
	LOAD R1, R7
	LOAD R7, R1
	BNE IfThenElse_else_a1212
	TSTO #1
	BOV pile_pleine
	PUSH R13
	LOAD 49(GB), R13
	LOAD R13, R0
	POP R13
	BRA IfThenElse_fin_a1212
IfThenElse_else_a1212:
IfThenElse_fin_a1212:
	TSTO #1
	BOV pile_pleine
	PUSH R11
	LOAD 49(GB), R11
	OPP R11, R11
	LOAD R11, R0
	POP R11
	POP R15
	POP R14
	POP R13
	POP R12
	POP R11
	POP R10
	POP R9
	POP R8
	POP R7
	POP R6
	POP R5
	POP R4
	POP R3
	POP R2
	RTS
code.RangeReduction.FirstReductionCos:
	PUSH R2
	PUSH R3
	PUSH R4
	PUSH R5
	PUSH R6
	PUSH R7
	PUSH R8
	PUSH R9
	PUSH R10
	PUSH R11
	PUSH R12
	PUSH R13
	PUSH R14
	PUSH R15
	TSTO #1
	BOV pile_pleine
	PUSH R12
	LOAD #0x1.92p1, R12
	STORE R12, 50(GB)
	POP R12
	TSTO #1
	BOV pile_pleine
	PUSH R14
	LOAD #0x1.fb5444p-11, R14
	STORE R14, 51(GB)
	POP R14
	TSTO #1
	BOV pile_pleine
	PUSH R4
	LOAD -3(LB), R4
	TSTO #1
	BOV pile_pleine
	PUSH R5
	LOAD -2(LB), R1
	LOAD 1(R1), R5
	DIV R5, R4
	BOV divisionErr
	INT R4, R4
	STORE R4, 52(GB)
	POP R4
	TSTO #1
	BOV pile_pleine
	PUSH R15
	LOAD -3(LB), R15
	TSTO #1
	BOV pile_pleine
	PUSH R6
	LOAD 52(GB), R6
	FLOAT R6, R6
	TSTO #1
	BOV pile_pleine
	PUSH R2
	LOAD 50(GB), R2
	MUL R2, R6
	BOV over_flow
	POP R2
	SUB R6, R15
	POP R6
	STORE R15, 53(GB)
	POP R15
	TSTO #1
	BOV pile_pleine
	PUSH R3
	LOAD 53(GB), R3
	TSTO #1
	BOV pile_pleine
	PUSH R7
	LOAD 52(GB), R7
	FLOAT R7, R7
	TSTO #1
	BOV pile_pleine
	PUSH R8
	LOAD 51(GB), R8
	MUL R8, R7
	BOV over_flow
	POP R8
	SUB R7, R3
	POP R7
	STORE R3, 53(GB)
	POP R3
	TSTO #1
	BOV pile_pleine
	PUSH R9
	LOAD 53(GB), R9
	LOAD R9, R0
	POP R9
	POP R15
	POP R14
	POP R13
	POP R12
	POP R11
	POP R10
	POP R9
	POP R8
	POP R7
	POP R6
	POP R5
	POP R4
	POP R3
	POP R2
	RTS
code.Object.equals:
pile_pleine:
	WSTR "Error: Stack Overflow"
	WNL
	ERROR
over_flow:
	WSTR "Error: Overflow during arithmetic operation"
	WNL
	ERROR
i0_error:
	WSTR "Error: Input/Output error"
	WNL
	ERROR
divisionErr:
	WSTR "Error :Division par 0"
	WNL
	ERROR
