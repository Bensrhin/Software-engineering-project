	TSTO #11
	BOV pile_pleine
	ADDSP #30
; table des methodes
; construction de la table des methodes de Object
	LOAD #null, R0
	STORE R0, 1(GB)
	LOAD code.Object.equals, R0
	STORE R0, 2(GB)
; construction de la table des methodes de Methods
	LEA 1(GB), R0
	STORE R0, 3(GB)
	LOAD code.Methods.factoriel, R0
	STORE R0, 5(GB)
	LOAD code.Methods.abs, R0
	STORE R0, 7(GB)
	LOAD code.Methods.power, R0
	STORE R0, 6(GB)
	LOAD code.Object.equals, R0
	STORE R0, 4(GB)
; construction de la table des methodes de Taylor
	LEA 1(GB), R0
	STORE R0, 8(GB)
	LOAD code.Taylor.taylorCosinus, R0
	STORE R0, 11(GB)
	LOAD code.Taylor.coefTaylorCosinus, R0
	STORE R0, 10(GB)
	LOAD code.Object.equals, R0
	STORE R0, 9(GB)
; Main program
; Beginning of main instructions:
	LOAD #0x1.921fb8p1, R2
	STORE R2, 12(GB)
	LOAD #1, R2
	OPP R2, R2
	LOAD #32, R3
	QUO R3, R2
	BOV divisionErr
	FLOAT R2, R2
	STORE R2, 13(GB)
	LOAD 12(GB), R2
	LOAD #4, R3
	FLOAT R3, R3
	DIV R3, R2
	BOV divisionErr
	STORE R2, 14(GB)
; instruction new
	NEW #2, R2
	LEA 8(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.Taylor
	POP R2
	STORE R2, 15(GB)
; appel de methode3
	ADDSP #3
	LOAD 15(GB), R2
	STORE R2, 0(SP)
	LOAD #0x0.0p0, R3
	STORE R3, -1(SP)
	LOAD #7, R3
	STORE R3, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #3
	STORE R0, 16(GB)
	LOAD 16(GB), R1
	WFLOAT
	HALT
init.Methods:
	RTS
code.Methods.factoriel:
	PUSH R5
	PUSH R4
	PUSH R3
	PUSH R2
	LOAD -3(LB), R3
	LOAD #0, R4
	SUB R4, R3
	LOAD R3, R1
	BEQ OpCmp_if_in_a412
	LOAD #1, R1
	BRA OpCmp_fin_in_a412
OpCmp_if_in_a412:
	LOAD #0, R1
OpCmp_fin_in_a412:
	LOAD R1, R2
	LOAD R2, R1
	BNE IfThenElse_else_a412
	LOAD #1, R4
	LOAD R4, R0
	BRA IfThenElse_fin_a412
IfThenElse_else_a412:
IfThenElse_fin_a412:
	LOAD -3(LB), R2
; appel de methode2
	ADDSP #2
	LOAD -2(LB), R4
	STORE R4, 0(SP)
	LOAD -3(LB), R3
	LOAD #1, R5
	SUB R5, R3
	STORE R3, -1(SP)
	LOAD 0(SP), R4
	CMP #null, R4
	BEQ pile_pleine
	LOAD 0(R4), R4
	BSR 2(R4)
	SUBSP #2
	MUL R0, R2
	BOV over_flow
	LOAD R2, R0
	POP R2
	POP R3
	POP R4
	POP R5
	RTS
code.Methods.power:
	PUSH R5
	PUSH R4
	PUSH R3
	PUSH R2
	LOAD #0, R2
	STORE R2, 17(GB)
	LOAD #0x1.0p0, R2
	STORE R2, 18(GB)
	LOAD #0x1.06p6, R2
	STORE R2, 19(GB)
	LOAD #1, R4
	LOAD #0, R3
	SUB R3, R4
	LOAD R4, R1
	BGT OpCmp_if_in_a1312
	LOAD #1, R1
	BRA OpCmp_fin_in_a1312
OpCmp_if_in_a1312:
	LOAD #0, R1
OpCmp_fin_in_a1312:
	LOAD R1, R2
	LOAD R2, R1
	BNE IfThenElse_else_a1312
	BRA IfThenElse_fin_a1312
IfThenElse_else_a1312:
IfThenElse_fin_a1312:
	LOAD #0x1.8p0, R2
	LOAD R2, R0
	POP R2
	POP R3
	POP R4
	POP R5
	RTS
code.Methods.abs:
	PUSH R5
	PUSH R4
	PUSH R3
	PUSH R2
	LOAD -3(LB), R3
	LOAD #0x0.0p0, R4
	SUB R4, R3
	LOAD R3, R1
	BGT OpCmp_if_in_a1912
	LOAD #1, R1
	BRA OpCmp_fin_in_a1912
OpCmp_if_in_a1912:
	LOAD #0, R1
OpCmp_fin_in_a1912:
	LOAD R1, R2
	LOAD R2, R1
	BNE IfThenElse_else_a1912
	LOAD -3(LB), R4
	LOAD R4, R0
	BRA IfThenElse_fin_a1912
IfThenElse_else_a1912:
IfThenElse_fin_a1912:
	LOAD -3(LB), R2
	OPP R2, R2
	LOAD R2, R0
	POP R2
	POP R3
	POP R4
	POP R5
	RTS
init.Taylor:
; instruction new
	NEW #1, R2
	LEA 3(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.Methods
	POP R2
	LOAD R2, R0
	LOAD -2(LB), R1
	STORE R0, 1(R1)
	RTS
code.Taylor.coefTaylorCosinus:
	PUSH R5
	PUSH R4
	PUSH R3
	PUSH R2
	LOAD #0x1.8p0, R2
	LOAD R2, R0
	POP R2
	POP R3
	POP R4
	POP R5
	RTS
code.Taylor.taylorCosinus:
	PUSH R5
	PUSH R4
	PUSH R3
	PUSH R2
	LOAD #0, R2
	FLOAT R2, R2
	STORE R2, 20(GB)
	LOAD #0, R2
	STORE R2, 21(GB)
While_cond_a3715:
	LOAD 21(GB), R4
	LOAD -4(LB), R3
	SUB R3, R4
	LOAD R4, R1
	BLT OpCmp_if_in_a3715
	LOAD #1, R1
	BRA OpCmp_fin_in_a3715
OpCmp_if_in_a3715:
	LOAD #0, R1
OpCmp_fin_in_a3715:
	LOAD R1, R2
	LOAD R2, R1
	BNE While_fin_a3715
	LOAD 20(GB), R3
; appel de methode2
	ADDSP #3
	LOAD -2(LB), R4
	STORE R4, 0(SP)
	LOAD 21(GB), R5
	STORE R5, -1(SP)
	LOAD -3(LB), R5
	STORE R5, -2(SP)
	LOAD 0(SP), R4
	CMP #null, R4
	BEQ pile_pleine
	LOAD 0(R4), R4
	BSR 2(R4)
	SUBSP #3
	ADD R0, R3
	STORE R3, 20(GB)
	LOAD 21(GB), R3
	LOAD #1, R4
	ADD R4, R3
	STORE R3, 21(GB)
	BRA While_cond_a3715
While_fin_a3715:
	LOAD 20(GB), R2
	LOAD R2, R0
	POP R2
	POP R3
	POP R4
	POP R5
	RTS
code.Object.equals:
pile_pleine:
	WSTR "Error: Stack Overflow"
	WNL
	ERROR
over_flow:
	WSTR "Error: Overflow during arithmetic operation"
	WNL
	ERROR
i0_error:
	WSTR "Error: Input/Output error"
	WNL
	ERROR
divisionErr:
	WSTR "Error :Division par 0"
	WNL
	ERROR
