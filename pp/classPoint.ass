	TSTO #44
	BOV pile_pleine
	ADDSP #27
; table des methodes
; construction de la table des methodes de Object
	LOAD #null, R0
	STORE R0, 1(GB)
	LOAD code.Object.equals, R0
	STORE R0, 2(GB)
; construction de la table des methodes de Point
	LEA 1(GB), R0
	STORE R0, 3(GB)
	LOAD code.Point.move, R0
	STORE R0, 6(GB)
	LOAD code.Point.getX, R0
	STORE R0, 7(GB)
	LOAD code.Point.getY, R0
	STORE R0, 8(GB)
	LOAD code.Point.setXY, R0
	STORE R0, 5(GB)
	LOAD code.Object.equals, R0
	STORE R0, 4(GB)
; construction de la table des methodes de P2
	LEA 1(GB), R0
	STORE R0, 9(GB)
	LOAD code.P2.op, R0
	STORE R0, 11(GB)
	LOAD code.Object.equals, R0
	STORE R0, 10(GB)
; construction de la table des methodes de po
	LEA 3(GB), R0
	STORE R0, 12(GB)
	LOAD code.po.op, R0
	STORE R0, 20(GB)
	LOAD code.po.getZ, R0
	STORE R0, 19(GB)
	LOAD code.po.setZ, R0
	STORE R0, 18(GB)
	LOAD code.Point.move, R0
	STORE R0, 15(GB)
	LOAD code.Point.getX, R0
	STORE R0, 16(GB)
	LOAD code.Point.getY, R0
	STORE R0, 17(GB)
	LOAD code.Point.setXY, R0
	STORE R0, 14(GB)
	LOAD code.Object.equals, R0
	STORE R0, 13(GB)
; Main program
; Beginning of main instructions:
; instruction new
	NEW #3, R2
	LEA 3(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.Point
	POP R2
	STORE R2, 25(GB)
; instruction new
	NEW #3, R2
	LEA 9(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.P2
	POP R2
	STORE R2, 26(GB)
; instruction new
	NEW #4, R2
	LEA 12(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.po
	POP R2
	STORE R2, 27(GB)
; appel de methode2
	ADDSP #3
	LOAD 25(GB), R2
	STORE R2, 0(SP)
	LOAD #2, R3
	STORE R3, -1(SP)
	LOAD #3, R3
	STORE R3, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 2(R2)
	SUBSP #3
	LOAD R0, R3
; appel de methode3
	ADDSP #3
	LOAD 25(GB), R2
	STORE R2, 0(SP)
	LOAD #1, R4
	STORE R4, -1(SP)
	LOAD #1, R4
	STORE R4, -2(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #3
	LOAD R0, R4
; appel de methode4
	ADDSP #1
	LOAD 25(GB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 4(R2)
	SUBSP #1
	LOAD R0, R5
	STORE R5, 21(GB)
; appel de methode5
	ADDSP #1
	LOAD 25(GB), R5
	STORE R5, 0(SP)
	LOAD 0(SP), R5
	CMP #null, R5
	BEQ pile_pleine
	LOAD 0(R5), R5
	BSR 5(R5)
	SUBSP #1
	LOAD R0, R2
	STORE R2, 22(GB)
; appel de methode2
	ADDSP #1
	LOAD 26(GB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ pile_pleine
	LOAD 0(R2), R2
	BSR 2(R2)
	SUBSP #1
	LOAD R0, R5
	STORE R5, 23(GB)
; appel de methode6
	ADDSP #2
	LOAD 27(GB), R5
	STORE R5, 0(SP)
	LOAD 23(GB), R2
	STORE R2, -1(SP)
	LOAD 0(SP), R5
	CMP #null, R5
	BEQ pile_pleine
	LOAD 0(R5), R5
	BSR 6(R5)
	SUBSP #2
	LOAD R0, R2
; appel de methode8
	ADDSP #1
	LOAD 27(GB), R5
	STORE R5, 0(SP)
	LOAD 0(SP), R5
	CMP #null, R5
	BEQ pile_pleine
	LOAD 0(R5), R5
	BSR 8(R5)
	SUBSP #1
	LOAD R0, R6
	STORE R6, 24(GB)
	LOAD 21(GB), R1
	WINT
	WSTR " "
	LOAD 22(GB), R1
	WINT
	WSTR " "
	LOAD 23(GB), R1
	WINT
	WSTR " "
	LOAD 24(GB), R1
	WINT
	WNL
	HALT
init.Point:
	LOAD #2, R6
	LOAD R6, R0
	LOAD -2(LB), R1
	STORE R0, 1(R1)
	LOAD #2, R6
	LOAD R6, R0
	LOAD -2(LB), R1
	STORE R0, 2(R1)
	RTS
code.Point.setXY:
	PUSH R6
	PUSH R5
	PUSH R4
	PUSH R3
	PUSH R2
	LOAD -3(LB), R6
	LOAD -2(LB), R1
	STORE R6, 1(R1)
	LOAD -4(LB), R6
	LOAD -2(LB), R1
	STORE R6, 2(R1)
	POP R2
	POP R3
	POP R4
	POP R5
	POP R6
	RTS
code.Point.move:
	PUSH R6
	PUSH R5
	LOAD -2(LB), R0
	LOAD 1(R0), R6
	LOAD -3(LB), R5
	ADD R5, R6
	LOAD -2(LB), R1
	STORE R6, 1(R1)
	LOAD -2(LB), R0
	LOAD 2(R0), R6
	LOAD -4(LB), R5
	ADD R5, R6
	LOAD -2(LB), R1
	STORE R6, 2(R1)
	POP R5
	POP R6
	RTS
code.Point.getX:
	PUSH R6
	LOAD -2(LB), R0
	LOAD 1(R0), R6
	LOAD R6, R0
	POP R6
	RTS
code.Point.getY:
	PUSH R6
	LOAD -2(LB), R0
	LOAD 2(R0), R6
	LOAD R6, R0
	POP R6
	RTS
init.P2:
; instruction new
	NEW #3, R6
	LEA 3(GB), R0
	STORE R0, 0(R6)
	PUSH R6
	BSR init.Point
	POP R6
	LOAD R6, R0
	LOAD -2(LB), R1
	STORE R0, 1(R1)
; instruction new
	NEW #3, R6
	LEA 3(GB), R0
	STORE R0, 0(R6)
	PUSH R6
	BSR init.Point
	POP R6
	LOAD R6, R0
	LOAD -2(LB), R1
	STORE R0, 2(R1)
	RTS
code.P2.op:
	PUSH R6
	PUSH R5
; appel de methode4
	ADDSP #1
	LOAD -2(LB), R0
	LOAD 1(R0), R6
	STORE R6, 0(SP)
	LOAD 0(SP), R6
	CMP #null, R6
	BEQ pile_pleine
	LOAD 0(R6), R6
	BSR 4(R6)
	SUBSP #1
	LOAD R0, R5
	STORE R5, 1(LB)
; appel de methode5
	ADDSP #1
	LOAD -2(LB), R0
	LOAD 2(R0), R5
	STORE R5, 0(SP)
	LOAD 0(SP), R5
	CMP #null, R5
	BEQ pile_pleine
	LOAD 0(R5), R5
	BSR 5(R5)
	SUBSP #1
	LOAD R0, R6
	STORE R6, 2(LB)
	LOAD 1(LB), R6
	LOAD 2(LB), R5
	MUL R5, R6
	BOV over_flow
	LOAD R6, R0
	POP R5
	POP R6
	RTS
init.po:
	LOAD #0, R0
	LOAD -2(LB), R1
	STORE R0, 3(R1)
	PUSH R1
	BSR init.Point
	SUBSP #1
	POP R1
	LOAD #1, R6
	LOAD R6, R0
	LOAD -2(LB), R1
	STORE R0, 3(R1)
	RTS
code.po.setZ:
	PUSH R6
	LOAD -3(LB), R6
	LOAD -2(LB), R1
	STORE R6, 3(R1)
	POP R6
	RTS
code.po.getZ:
	PUSH R6
	LOAD -2(LB), R0
	LOAD 3(R0), R6
	LOAD R6, R0
	POP R6
	RTS
code.po.op:
	PUSH R6
	PUSH R5
	LOAD -2(LB), R0
	LOAD 1(R0), R6
	LOAD -2(LB), R0
	LOAD 2(R0), R5
	MUL R5, R6
	BOV over_flow
	LOAD -2(LB), R0
	LOAD 3(R0), R5
	MUL R5, R6
	BOV over_flow
	LOAD R6, R0
	POP R5
	POP R6
	RTS
code.Object.equals:
pile_pleine:
	WSTR "Error: Stack Overflow"
	WNL
	ERROR
over_flow:
	WSTR "Error: Overflow during arithmetic operation"
	WNL
	ERROR
i0_error:
	WSTR "Error: Input/Output error"
	WNL
	ERROR
divisionErr:
	WSTR "Error :Division par 0"
	WNL
	ERROR
